{"remainingRequest":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/babel-loader/lib/index.js!/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/src/components/BroadcastGraphics/LatestPunches.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/src/components/BroadcastGraphics/LatestPunches.vue","mtime":1568545481000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es7.string.pad-start\";\nimport \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport meosResultsApi from '@/meos-results-api';\nimport Velocity from 'velocity-animate';\nexport default {\n  data: function data() {\n    return {\n      resultsResponse: [],\n      radioId: this.$route.params.radioId,\n      ptb: 7,\n      mh: 45\n    };\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    var _this = this;\n\n    // Refresh the results from the API\n    this.refreshResults(); // Update the display\n\n    var updateLoop = function updateLoop() {\n      var nowMs = +new Date();\n      var updateIntervalMs = 1000;\n      var delay = Math.floor(nowMs / 1000) * 1000 - nowMs + updateIntervalMs;\n      setTimeout(function () {\n        _this.refreshResults();\n\n        updateLoop();\n      }, delay);\n    }; // Start the update loop\n\n\n    updateLoop();\n  },\n  filters: {\n    // Format the time for display\n    formatAbsoluteDiff: function formatAbsoluteDiff(t) {\n      if (t) {\n        // Convert into seconds\n        t = t / 10; // Format the time\n\n        var m, s;\n        m = Math.floor(Math.abs(t / 60)).toString();\n        s = Math.floor(Math.abs(t % 60)).toString().padStart(2, '0'); // If negative, they are faster\n\n        if (t < 0) {\n          return \"-\".concat(m, \":\").concat(s);\n        } // If positive, they are slower\n        else if (t > 0) {\n            return \"+\".concat(m, \":\").concat(s);\n          }\n      }\n\n      return null;\n    },\n    // Format the time for display\n    formatAbsoluteTime: function formatAbsoluteTime(t) {\n      if (t) {\n        // Convert into seconds\n        t = t / 10; // Format the time\n\n        var m, s;\n        m = Math.floor(Math.abs(t / 60)).toString();\n        s = Math.floor(Math.abs(t % 60)).toString().padStart(2, '0');\n        return \"\".concat(m, \":\").concat(s);\n      }\n\n      return null;\n    }\n  },\n  methods: {\n    refreshResults: function () {\n      var _refreshResults = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.radioId) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return meosResultsApi.getLatestPunchesForRadio(this.radioId);\n\n              case 3:\n                this.resultsResponse = _context.sent;\n                _context.next = 9;\n                break;\n\n              case 6:\n                _context.next = 8;\n                return meosResultsApi.getLatestPunches();\n\n              case 8:\n                this.resultsResponse = _context.sent;\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function refreshResults() {\n        return _refreshResults.apply(this, arguments);\n      }\n\n      return refreshResults;\n    }(),\n    // Calculates the competitors elapsed time\n    calculateElapsedTime: function calculateElapsedTime(competitorStartTime) {\n      // Check that we have a time\n      if (competitorStartTime) {\n        // Time of day in 10ths of seconds\n        var now = this.now;\n        var currentTimeSecs = (now.getSeconds() + 60 * now.getMinutes() + 60 * 60 * now.getHours()) * 10; // Calculate elapsed running time, we need to do this as all the radio times are relative to that competitor's running time,\n        // not absolute time\n\n        var elapsedRunningTime = currentTimeSecs - competitorStartTime; // Return the time\n\n        return elapsedRunningTime;\n      }\n\n      return null;\n    },\n    // Calculates the difference between two times\n    calculateDiffToLeader: function calculateDiffToLeader(secs) {\n      // Determine the difference - all times are in seconds (not 10ths of seconds)\n      var diff = secs - this.resultsResponse.radioResults[0].radioTime; // Return the diff\n\n      return diff;\n    },\n    // Displays the distance info (if available) for a particular radio\n    formatDistance: function formatDistance(d) {\n      // Convert the distance in meters into km for display, rounded to 1dp\n      var distanceInKm = parseFloat(d / 1000).toFixed(1); // Return the distance\n\n      return distanceInKm;\n    },\n    beforeEnter: function beforeEnter(el) {\n      var divs = el.querySelectorAll(\"div\");\n\n      for (var i = 0; i < divs.length; i++) {\n        divs[i].style.maxHeight = \"0px\";\n        divs[i].style.paddingTop = \"0px\";\n        divs[i].style.paddingBottom = \"0px\";\n      }\n    },\n    enter: function enter(el, done) {\n      var divs = el.querySelectorAll(\"div\");\n      Velocity(divs, {\n        maxHeight: this.mh,\n        paddingTop: this.ptb,\n        paddingBottom: this.ptb\n      }, {\n        duration: 300,\n        complete: done\n      });\n    },\n    leave: function leave(el, done) {\n      var divs = el.querySelectorAll(\"div\");\n      Velocity(divs, {\n        maxHeight: \"0px\",\n        paddingTop: \"0px\",\n        paddingBottom: \"0px\"\n      }, {\n        duration: 300,\n        complete: done\n      });\n    }\n  }\n};",{"version":3,"sources":["LatestPunches.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\n\t<div id=\"greenScreen\">\n\n\t\t<div id=\"graphicsContainer\">\n\n\t\t\t<table id=\"headingTable\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td><span class=\"latestPunches\">Latest Punches</span><span class=\"location\">{{ resultsResponse.radioInfo.radioId ? 'Control ' + resultsResponse.radioInfo.radioId : 'Finish' }}</span></td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\n\t\t\t<table class=\"punchTable\" id=\"punchTableRight\">\n\n\t\t\t\t<tbody is=\"transition-group\" name=\"punchTableBody\" @enter=\"enter\" @beforeEnter=\"beforeEnter\" @leave=\"leave\" :css=\"false\">\n\n\t\t\t\t\t<tr v-for=\"result in resultsResponse.latestPunches.slice(0, 5)\" class=\"punchRow\" :key=\"result.competitorId\">\n\n\t\t\t\t\t\t<td class=\"rank\"><div>{{ result.rank }}</div></td>\n\t\t\t\t\t\t<td class=\"className\"><div>{{ result.clsName }}</div></td>\n\t\t\t\t\t\t<td class=\"name\"><div>{{ result.name }}</div></td>\n\t\t\t\t\t\t<td class=\"club\"><div>{{ result.club }}</div></td>\n\t\t\t\t\t\t<td class=\"time\"><div>{{ result.time | formatAbsoluteTime }}</div></td>\n\t\t\t\t\t\t<td class=\"diff\"><div>{{ result.diff | formatAbsoluteDiff }}</div></td>\n\n\t\t\t\t\t</tr>\n\n\t\t\t\t</tbody>\n\n\t\t\t</table>\n\n\t\t\t<table class=\"punchTable\" id=\"punchTableLeft\">\n\n\t\t\t\t<tbody is=\"transition-group\" name=\"punchTableBody\" @enter=\"enter\" @beforeEnter=\"beforeEnter\" @leave=\"leave\" :css=\"false\">\n\n\t\t\t\t\t<tr v-for=\"result in resultsResponse.latestPunches.slice(5, 10).reverse()\" class=\"punchRow\" :key=\"result.competitorId\">\n\n\t\t\t\t\t\t<td class=\"rank\"><div>{{ result.rank }}</div></td>\n\t\t\t\t\t\t<td class=\"className\"><div>{{ result.clsName }}</div></td>\n\t\t\t\t\t\t<td class=\"name\"><div>{{ result.name }}</div></td>\n\t\t\t\t\t\t<td class=\"club\"><div>{{ result.club }}</div></td>\n\t\t\t\t\t\t<td class=\"time\"><div>{{ result.time | formatAbsoluteTime }}</div></td>\n\t\t\t\t\t\t<td class=\"diff\"><div>{{ result.diff | formatAbsoluteDiff }}</div></td>\n\n\t\t\t\t\t</tr>\n\n\t\t\t\t</tbody>\n\n\t\t\t</table>\n\n\t\t</div>\n\n\t</div>\n\n</template>\n\n<style scoped>\n\n\t#greenScreen {\n\t\twidth: 1920px;\n\t\theight: 1080px;\n\t\tbackground-color: green;\n\t\tposition: relative;\n\t}\n\n\t#graphicsContainer {\n\t\tfont-family: Roboto;\n\t\t/*background-color: red;*/\n\t\tposition: absolute;\n\t\tbottom: 100px;\n\t\tleft: 90px;\n\t\twidth: 1740px;\n\t\theight: 300px;\n\t\toverflow: hidden;\n\t}\n\n\ttable#headingTable {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0;\n\t\twidth: 845px;\n\t\tbackground-color: #578a84;\n\t\tcolor: white;\n\t\ttext-transform: uppercase;\n\t\theight: 50px;\n\t}\n\n\ttable#headingTable td {\n\t\tpadding-left: 10px;\n\t\tpadding-top: 3px;\n\t}\n\n\ttable#headingTable td .latestPunches {\n\t\tfont-size: 28px;\n\t\tfont-weight: 500;\n\t}\n\n\ttable#headingTable td .location {\n\t\tmargin-left: 20px;\n\t\tfont-size: 18px;\n\t\tfont-weight: 300;\n\t}\n\n\ttable#punchTableRight {\n\t\tposition: absolute;\n\t\tright: 0;\n\t\tbottom: 0;\n\t}\n\n\ttable#punchTableLeft{\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\tbottom: 0;\n\t}\n\n\ttable.punchTable {\n\t\tfont-size: 26px;\t\t\n\t\tborder-collapse: separate;\n\t\tborder-spacing: 0 4px;\n\t\ttext-transform: uppercase;\n\t}\n\n\ttable.punchTable tr td div {\n\t\theight: 45px;\n\t\tbackground-color: white;\n\t}\n\n\ttable.punchTable tr td:first-child div {\n\t\tborder-top-left-radius: 10px;\n\t\tborder-bottom-left-radius: 10px;\n\t}\n\n\ttable.punchTable tr td:last-child div {\n\t\tborder-top-right-radius: 10px;\n\t\tborder-bottom-right-radius: 10px;\n\t}\n\n\ttable.punchTable td {\n\t\tpadding: 0;\n\t}\n\n\ttable.punchTable td div {\n\t\tbox-sizing: border-box;\n\t\tmax-height: 45px;\n\t\toverflow: hidden;\n\t\tpadding-top: 7px;\n\t}\n\n\ttable.punchTable td.rank div {\n\t\twidth: 50px;\n\t\tpadding-right: 3px;\n\t\ttext-align: center;\n\t\tbackground-color: #e65c00;\n\t\tcolor: white;\n\t\tfont-weight: 500;\n\t\tborder-left: 3px solid #e65c00;\n\t\tbox-shadow: -15px 0 15px -15px #525252 inset;\n\t}\n\n\ttable.punchTable td.className div {\n\t\twidth: 100px;\n\t\tpadding-left: 10px;\n\t\ttext-align: center;\n\t\tfont-weight: 300;\n\t\tbox-shadow: -15px 0 15px -15px #828282 inset;\n\t}\n\n\ttable.punchTable td.name div {\n\t\twidth: 420px;\n\t\tpadding-left: 10px;\n\t\tfont-weight: 500;\n\t}\n\n\ttable.punchTable td.club div {\n\t\twidth: 70px;\n\t\tfont-size: 18px;\n\t\ttext-align: center;\n\t\tpadding-top: 11px !important;\n\t\tbox-shadow: 15px 0 15px -15px #828282 inset;\n\t}\n\n\ttable.punchTable td.time div {\n\t\twidth: 120px;\n\t\ttext-align: right;\n\t\tpadding-right: 7px;\n\t\tfont-weight: 500;\n\t\tbackground-color: #e65c00;\n\t\tcolor: white;\n\t\tborder-right: 3px solid #e65c00;\n\t\tbox-shadow: 15px 0 15px -15px #525252 inset;\n\t}\n\n\ttable.punchTable td.diff div {\n\t\twidth: 85px;\n\t\ttext-align: right;\n\t\tpadding-right: 10px;\n\t\tfont-weight: 300;\n\t\tfont-size: 18px;\n\t\tbackground-color: #578a84;\n\t\tcolor: white;\n\t\tpadding-top: 11px !important;\n\t}\n\n</style>\n\n<script>\n\n\timport meosResultsApi from '@/meos-results-api'\n\timport Velocity from 'velocity-animate'\n\n\texport default {\n\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tresultsResponse: [],\n\t\t\t\tradioId: this.$route.params.radioId,\n\t\t\t\tptb: 7,\n\t\t\t\tmh: 45,\n\t\t\t}\n\t\t},\n\n\t\tcreated () {\n\n\t\t\t\n\t\t\n\t\t},\n\n\t\tmounted() {\n\t\t\t\n\t\t\t// Refresh the results from the API\n\t\t\tthis.refreshResults();\n\n\t\t\t// Update the display\n\t\t\tconst updateLoop = () => {\n\t\t\t\tconst nowMs = +new Date()\n\t\t\t\tconst updateIntervalMs = 1000;\n\t\t\t\tconst delay = Math.floor(nowMs / 1000) * 1000 - nowMs + updateIntervalMs\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.refreshResults()\n\t\t\t\t\tupdateLoop()\n\n\t\t\t\t}, delay)\n\t\t\t}\n\n\t\t\t// Start the update loop\n\t\t\tupdateLoop()\n\n\t\t},\n\n\t\tfilters: {\n\n\t\t\t// Format the time for display\n\t\t\tformatAbsoluteDiff: function(t) {\n\t\t\t\t\n\t\t\t\tif (t) {\n\n\t\t\t\t\t// Convert into seconds\n\t\t\t\t\tt = t / 10;\n\n\t\t\t\t\t// Format the time\n\t\t\t\t\tvar m, s;\n\t\t\t\t\tm = (Math.floor(Math.abs(t/60)).toString());\n\t\t\t\t\ts = (Math.floor(Math.abs(t%60)).toString().padStart(2, '0'));\n\n\t\t\t\t\t// If negative, they are faster\n\t\t\t\t\tif (t < 0) {\n\t\t\t\t\t\treturn `-${m}:${s}`;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If positive, they are slower\n\t\t\t\t\telse if (t > 0) {\n\t\t\t\t\t\treturn `+${m}:${s}`;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t\t// Format the time for display\n\t\t\tformatAbsoluteTime: function(t) {\n\t\t\t\t\n\t\t\t\tif (t) {\n\n\t\t\t\t\t// Convert into seconds\n\t\t\t\t\tt = t / 10;\n\n\t\t\t\t\t// Format the time\n\t\t\t\t\tvar m, s;\n\t\t\t\t\tm = (Math.floor(Math.abs(t/60)).toString());\n\t\t\t\t\ts = (Math.floor(Math.abs(t%60)).toString().padStart(2, '0'));\n\n\t\t\t\t\treturn `${m}:${s}`;\t\t\t\t\t\t\t\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t},\n\n\t\tmethods: {\n\n\t\t\tasync refreshResults () {\n\n\t\t\t\t// Get the new results\n\t\t\t\tif (this.radioId) {\n\t\t\t\t\tthis.resultsResponse = await meosResultsApi.getLatestPunchesForRadio(this.radioId);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.resultsResponse = await meosResultsApi.getLatestPunches();\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t// Calculates the competitors elapsed time\n\t\t\tcalculateElapsedTime(competitorStartTime) {\n\n\t\t\t\t// Check that we have a time\n\t\t\t\tif (competitorStartTime) {\n\n\t\t\t\t\t// Time of day in 10ths of seconds\n\t\t\t\t\tconst { now } = this;\n\t\t\t\t\tconst currentTimeSecs = (now.getSeconds() + (60 * now.getMinutes()) + (60 * 60 * now.getHours())) * 10;\n\n\t\t\t\t\t// Calculate elapsed running time, we need to do this as all the radio times are relative to that competitor's running time,\n\t\t\t\t\t// not absolute time\n\t\t\t\t\tconst elapsedRunningTime = currentTimeSecs - competitorStartTime;\n\n\t\t\t\t\t// Return the time\n\t\t\t\t\treturn elapsedRunningTime;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t\t// Calculates the difference between two times\n\t\t\tcalculateDiffToLeader(secs) {\n\n\t\t\t\t// Determine the difference - all times are in seconds (not 10ths of seconds)\n\t\t\t\tconst diff = (secs - this.resultsResponse.radioResults[0].radioTime);\n\n\t\t\t\t// Return the diff\n\t\t\t\treturn diff;\n\n\t\t\t},\n\n\t\t\t// Displays the distance info (if available) for a particular radio\n\t\t\tformatDistance(d) {\n\n\t\t\t\t// Convert the distance in meters into km for display, rounded to 1dp\n\t\t\t\tvar distanceInKm = parseFloat(d / 1000).toFixed(1);\n\n\t\t\t\t// Return the distance\n\t\t\t\treturn distanceInKm;\n\n\t\t\t},\n\n\t\t\tbeforeEnter(el) {\n\t\t\t\tlet divs = el.querySelectorAll(\"div\");\n\t\t\t\tfor (let i = 0; i < divs.length; i++) {\n\t\t\t\t\tdivs[i].style.maxHeight = \"0px\";\n\t\t\t\t\tdivs[i].style.paddingTop = \"0px\";\n\t\t\t\t\tdivs[i].style.paddingBottom = \"0px\";\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tenter(el, done) {\n\t\t\t\tlet divs = el.querySelectorAll(\"div\");\n\t\t\t\tVelocity(\n\t\t\t\t\tdivs,\n\t\t\t\t\t{ maxHeight: this.mh, paddingTop: this.ptb, paddingBottom: this.ptb },\n\t\t\t\t\t{ duration: 300, complete: done }\n\t\t\t\t);\n\t\t\t},\n\t\t\t\n\t\t\tleave(el, done) {\n\t\t\t\tlet divs = el.querySelectorAll(\"div\");\n\t\t\t\tVelocity(\n\t\t\t\t\tdivs,\n\t\t\t\t\t{ maxHeight: \"0px\", paddingTop: \"0px\", paddingBottom: \"0px\" },\n\t\t\t\t\t{ duration: 300, complete: done }\n\t\t\t\t);\n\t\t\t},\n\n\t\t}\n\n\t}\n\n</script>"],"sourceRoot":"src/components/BroadcastGraphics"}]}