{"remainingRequest":"/Users/sithum/Downloads/meos-results-screens-master/meos-results-screens/node_modules/babel-loader/lib/index.js!/Users/sithum/Downloads/meos-results-screens-master/meos-results-screens/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sithum/Downloads/meos-results-screens-master/meos-results-screens/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sithum/Downloads/meos-results-screens-master/meos-results-screens/src/components/BroadcastGraphics/OverallStandings.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sithum/Downloads/meos-results-screens-master/meos-results-screens/src/components/BroadcastGraphics/OverallStandings.vue","mtime":1568545481000},{"path":"/Users/sithum/Downloads/meos-results-screens-master/meos-results-screens/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sithum/Downloads/meos-results-screens-master/meos-results-screens/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sithum/Downloads/meos-results-screens-master/meos-results-screens/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sithum/Downloads/meos-results-screens-master/meos-results-screens/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/sithum/Downloads/meos-results-screens-master/meos-results-screens/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es7.string.pad-start\";\nimport \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport meosResultsApi from '@/meos-results-api';\nexport default {\n  data: function data() {\n    return {\n      resultsResponse: [],\n      currentClassIndex: 0,\n      // index from resultsResponse of the current class being displayed\n      currentClassPage: 1 // the current page of that class being displayed\n\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    // Refresh the results from the API\n    this.refreshResults(); // Update the display\n\n    var updateLoop = function updateLoop() {\n      var nowMs = +new Date();\n      var updateIntervalMs = 1000;\n      var delay = Math.floor(nowMs / 1000) * 1000 - nowMs + updateIntervalMs;\n      setTimeout(function () {\n        _this.refreshResults();\n\n        updateLoop();\n      }, delay);\n    }; // Start the update loop\n\n\n    updateLoop(); // Scroll/transition the results\n\n    setInterval(function () {\n      // DEBUG - stop after one scroll\n      // clearInterval(transitionInterval);\n      // Get a reference to the class object for the current class\n      var clsObj = _this.resultsResponse.cmpResults[_this.currentClassIndex]; // Check how many pages are in this class\n\n      var totalPages = Math.ceil(clsObj.clsResults.length / 10) * 10 / 10; // Check if we still have pages to go?\n\n      if (_this.currentClassPage < totalPages) {\n        // Scroll to the next page\n        _this.scrollNextResultsPage(clsObj.clsName, _this.currentClassPage); // Increment currentClassPage\n\n\n        _this.currentClassPage += 1;\n      } // We're at the end of the pages for this class\n      else {\n          // Reset currentClassPage\n          _this.currentClassPage = 1; // Increment currentClassIndex\n\n          _this.currentClassIndex += 1; // Check if we have reached the end of the results\n\n          if (_this.currentClassIndex >= _this.resultsResponse.cmpResults.length - 1) {\n            // Rewind back to the first class\n            _this.currentClassIndex = 0; // Reset the scroll on all classes\n\n            for (var i = 0; i <= _this.resultsResponse.cmpResults.length; i++) {\n              var clsName = _this.resultsResponse.cmpResults[i].clsName;\n              _this.$refs[clsName][0].scrollTop = 0;\n            }\n          } // Check if the next class has results to show\n\n\n          while (_this.resultsResponse.cmpResults[_this.currentClassIndex].clsResults == 0) {\n            // If not, increment currentClassIndex and check again\n            _this.currentClassIndex += 1;\n          }\n        }\n    }, 5000);\n  },\n  filters: {\n    // Format the time for display\n    formatAbsoluteDiff: function formatAbsoluteDiff(t) {\n      if (t) {\n        // Convert into seconds\n        t = t / 10; // Format the time\n\n        var m, s;\n        m = Math.floor(Math.abs(t / 60)).toString();\n        s = Math.floor(Math.abs(t % 60)).toString().padStart(2, '0'); // If negative, they are faster\n\n        if (t < 0) {\n          return \"-\".concat(m, \":\").concat(s);\n        } // If positive, they are slower\n        else if (t > 0) {\n            return \"+\".concat(m, \":\").concat(s);\n          }\n      }\n\n      return null;\n    },\n    // Format the time for display\n    formatAbsoluteTime: function formatAbsoluteTime(t) {\n      if (t) {\n        // Convert into seconds\n        t = t / 10; // Format the time\n\n        var m, s;\n        m = Math.floor(Math.abs(t / 60)).toString();\n        s = Math.floor(Math.abs(t % 60)).toString().padStart(2, '0');\n        return \"\".concat(m, \":\").concat(s);\n      }\n\n      return null;\n    }\n  },\n  methods: {\n    refreshResults: function () {\n      var _refreshResults = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return meosResultsApi.getOverallStandings();\n\n              case 2:\n                this.resultsResponse = _context.sent;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function refreshResults() {\n        return _refreshResults.apply(this, arguments);\n      }\n\n      return refreshResults;\n    }(),\n    // Calculates the competitors elapsed time\n    calculateElapsedTime: function calculateElapsedTime(competitorStartTime) {\n      // Check that we have a time\n      if (competitorStartTime) {\n        // Time of day in 10ths of seconds\n        var now = this.now;\n        var currentTimeSecs = (now.getSeconds() + 60 * now.getMinutes() + 60 * 60 * now.getHours()) * 10; // Calculate elapsed running time, we need to do this as all the radio times are relative to that competitor's running time,\n        // not absolute time\n\n        var elapsedRunningTime = currentTimeSecs - competitorStartTime; // Return the time\n\n        return elapsedRunningTime;\n      }\n\n      return null;\n    },\n    // Calculates the difference between two times\n    calculateDiffToLeader: function calculateDiffToLeader(secs) {\n      // Determine the difference - all times are in seconds (not 10ths of seconds)\n      var diff = secs - this.resultsResponse.radioResults[0].radioTime; // Return the diff\n\n      return diff;\n    },\n    // Displays the distance info (if available) for a particular radio\n    formatDistance: function formatDistance(d) {\n      // Convert the distance in meters into km for display, rounded to 1dp\n      var distanceInKm = parseFloat(d / 1000).toFixed(1); // Return the distance\n\n      return distanceInKm;\n    },\n    // Calculates how many padding table rows we need to take it up to a multiple of 10\n    calculatePaddingRows: function calculatePaddingRows(resultRowCount) {\n      return Math.ceil(resultRowCount / 10) * 10 - resultRowCount;\n    },\n    scrollNextResultsPage: function scrollNextResultsPage(clsName, currentPage) {\n      //t = current time\n      //b = start value\n      //c = change in value\n      //d = duration\n      var easeInOutQuad = function easeInOutQuad(t, b, c, d) {\n        t /= d / 2;\n        if (t < 1) return c / 2 * t * t + b;\n        t--;\n        return -c / 2 * (t * (t - 2) - 1) + b;\n      };\n\n      var element = this.$refs[clsName][0];\n      var to = 441;\n\n      if (currentPage > 1) {\n        to = -((currentPage - 2) * 441);\n      }\n\n      var duration = 600;\n      var start = element.scrollTop,\n          change = start + to,\n          currentTime = 0,\n          increment = 20;\n\n      var animateScroll = function animateScroll() {\n        currentTime += increment;\n        var val = easeInOutQuad(currentTime, start, change, duration);\n        element.scrollTop = val;\n\n        if (currentTime < duration) {\n          setTimeout(animateScroll, increment);\n        }\n      };\n\n      animateScroll();\n    },\n    showResultsContainer: function showResultsContainer(clsIndex) {\n      if (clsIndex == this.currentClassIndex) return 'show';\n      return '';\n    }\n  }\n};",{"version":3,"sources":["OverallStandings.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\n\t<div id=\"greenScreen\">\n\n\t\t<template v-for=\"(cls, index) in resultsResponse.cmpResults\">\n\n\t\t\t<div class=\"clsResultsContainer\" :id=\"cls.clsName\" :key=\"cls.clsId\" v-bind:class=\"showResultsContainer(index)\">\n\n\t\t\t\t<table class=\"clsResults\">\n\t\t\t\t\t<tr class=\"resultHeader\">\n\t\t\t\t\t\t<td colspan=\"4\"><div class=\"classInfo\"><span class=\"className\">{{ cls.clsName }}</span><span class=\"courseDistance\">{{ cls.course }} • {{ formatDistance(cls.length) }} km</span></div><div class=\"resultsInfo\">Standings at Finish</div></td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr v-for=\"result in cls.clsResults.slice(0,1)\" :key=\"result.competitorId\" class=\"resultRow firstPlace\">\n\t\t\t\t\t\t<td class=\"rank\">{{ result.rank }}</td>\n\t\t\t\t\t\t<td class=\"name\">{{ result.name }}</td>\n\t\t\t\t\t\t<td class=\"club\">{{ result.club }}</td>\n\t\t\t\t\t\t<td class=\"time\">{{ result.time | formatAbsoluteTime }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\n\t\t\t\t<div class=\"clsResultsTableContainer\" v-bind:ref=\"cls.clsName\">\n\n\t\t\t\t\t<table class=\"clsResults\">\n\n\t\t\t\t\t\t<tr v-for=\"result in cls.clsResults.slice(1)\" :key=\"result.competitorId\" class=\"resultRow\">\n\n\t\t\t\t\t\t\t<td class=\"rank\">{{ result.rank }}</td>\n\t\t\t\t\t\t\t<td class=\"name\">{{ result.name }}</td>\n\t\t\t\t\t\t\t<td class=\"club\">{{ result.club }}</td>\n\t\t\t\t\t\t\t<td class=\"time\">{{ result.diff | formatAbsoluteDiff }}</td>\n\n\t\t\t\t\t\t</tr>\n\n\t\t\t\t\t\t<!-- these are the padding rows to take it to a multiple of 10, so the scroll looks nice -->\n\t\t\t\t\t\t<tr class=\"paddingRow\" v-for=\"n in calculatePaddingRows(cls.clsResults.length)\" :key=\"n\">\n\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t</tr>\n\n\t\t\t\t\t</table>\n\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t</template>\n\n\t</div>\n\n</template>\n\n<style scoped>\n\n\t#greenScreen {\n\t\twidth: 1920px;\n\t\theight: 1080px;\n\t\tbackground-color: green;\n\t\tposition: relative;\n\t}\n\n\t.clsResultsContainer {\n\t\tposition: absolute;\n\t\topacity: 0;\n\t\twidth: 750px;\n\t\theight: 545px;\n\t\tleft: 0;\n\t\tright: 0;\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\tmargin: auto;\n\t\t/*background-color: red;*/\n\t\ttransition: opacity 1.0s linear;\n\t}\n\n\t.clsResultsContainer.show {\n\t\topacity: 1;\n\t}\n\n\t.clsResultsTableContainer {\n\t\tposition: absolute;\n\t\ttop: 98px;\n\t\twidth: 750px;\n\t\theight: 445px;\n\t\toverflow-y: scroll;\t\t\n\t}\n\n\t.clsResultsTableContainer::-webkit-scrollbar {\n\t\twidth: 0px;  /* Remove scrollbar space */\n\t\tbackground: transparent;  /* Optional: just make scrollbar invisible */\n\t}\n\n\ttable.clsResults {\n\t\tfont-family: Roboto;\n\t\tfont-size: 26px;\t\t\n\t\tborder-collapse: separate;\n\t\tborder-spacing: 0 4px;\n\t\ttext-transform: uppercase;\n\t}\n\n\ttable.clsResults tr {\n\t\theight: 45px;\n\t\tbackground-color: white;\n\t}\n\n\ttable.clsResults tr.resultHeader {\n\t\tbackground-color: #578a84;\n\t\tcolor: white;\n\t}\n\n\ttable.clsResults tr.resultHeader td {\n\t\tpadding: 0 10px;\n\t}\n\n\ttable.clsResults tr.resultHeader td .classInfo {\n\t\tfloat: left;\n\t\tfont-weight: 500;\n\t\tmargin-top: 2px;\n\t}\n\n\ttable.clsResults tr.resultHeader td .classInfo .courseDistance {\n\t\tfont-weight: 300;\n\t\tpadding-left: 20px;\n\t\tfont-size: 18px;\n\t}\n\n\ttable.clsResults tr.resultHeader td .resultsInfo {\n\t\tfloat: right;\n\t\tpadding-left: 30px;\n\t\tfont-weight: 300;\n\t\tmargin-top: 2px;\n\t}\n\n\ttable.clsResults tr.paddingRow {\n\t\tbackground-color: transparent;\n\t}\n\n\ttable.clsResults tr.resultRow td.rank {\n\t\twidth: 50px;\n\t\tpadding-right: 3px;\n\t\ttext-align: center;\n\t\tbackground-color: #e65c00;\n\t\tcolor: white;\n\t\tfont-weight: 500;\n\t\tborder-left: 3px solid #e65c00;\n\t}\n\n\ttable.clsResults tr.resultRow.firstPlace td.rank {\n\t\tbackground-color: #CFB53B;\n\t\tborder-left: 3px solid #CFB53B;\n\t}\n\n\ttable.clsResults tr.resultRow td.name {\n\t\twidth: 450px;\n\t\tpadding-left: 10px;\n\t}\n\n\ttable.clsResults tr.resultRow td.club {\n\t\twidth: 100px;\n\t\ttext-align: center;\n\t\tfont-weight: 300;\n\t}\n\n\ttable.clsResults tr.resultRow td.time {\n\t\twidth: 150px;\n\t\ttext-align: right;\n\t\tpadding-right: 7px;\n\t\tfont-weight: 500;\n\t\tbackground-color: #e65c00;\n\t\tcolor: white;\n\t\tborder-right: 3px solid #e65c00;\n\t}\n\n\ttable.clsResults tr.resultRow.firstPlace td.time {\n\t\tbackground-color: #CFB53B;\n\t\tborder-right: 3px solid #CFB53B;\n\t}\n\n</style>\n\n<script>\n\n\timport meosResultsApi from '@/meos-results-api'\n\n\texport default {\n\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tresultsResponse: [],\n\t\t\t\tcurrentClassIndex: 0, // index from resultsResponse of the current class being displayed\n\t\t\t\tcurrentClassPage: 1, // the current page of that class being displayed\n\t\t\t}\n\t\t},\n\n\t\tcreated () {\n\n\t\t\t// Refresh the results from the API\n\t\t\tthis.refreshResults();\n\n\t\t\t// Update the display\n\t\t\tconst updateLoop = () => {\n\t\t\t\tconst nowMs = +new Date()\n\t\t\t\tconst updateIntervalMs = 1000;\n\t\t\t\tconst delay = Math.floor(nowMs / 1000) * 1000 - nowMs + updateIntervalMs\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.refreshResults()\n\t\t\t\t\tupdateLoop()\n\n\t\t\t\t}, delay)\n\t\t\t}\n\n\t\t\t// Start the update loop\n\t\t\tupdateLoop()\n\n\t\t\t\n\t\t\t// Scroll/transition the results\n\t\t\tsetInterval(() => {\n\n\t\t\t\t// DEBUG - stop after one scroll\n\t\t\t\t// clearInterval(transitionInterval);\n\n\t\t\t\t// Get a reference to the class object for the current class\n\t\t\t\tconst clsObj = this.resultsResponse.cmpResults[this.currentClassIndex];\n\n\t\t\t\t// Check how many pages are in this class\n\t\t\t\tconst totalPages = (Math.ceil(clsObj.clsResults.length / 10) * 10) / 10;\n\t\t\t\t\n\t\t\t\t// Check if we still have pages to go?\n\t\t\t\tif (this.currentClassPage < totalPages) {\n\n\t\t\t\t\t// Scroll to the next page\n\t\t\t\t\tthis.scrollNextResultsPage(clsObj.clsName, this.currentClassPage);\n\n\t\t\t\t\t// Increment currentClassPage\n\t\t\t\t\tthis.currentClassPage += 1;\n\n\t\t\t\t}\n\n\t\t\t\t// We're at the end of the pages for this class\n\t\t\t\telse {\n\n\t\t\t\t\t// Reset currentClassPage\n\t\t\t\t\tthis.currentClassPage = 1;\n\n\t\t\t\t\t// Increment currentClassIndex\n\t\t\t\t\tthis.currentClassIndex += 1;\n\n\t\t\t\t\t// Check if we have reached the end of the results\n\t\t\t\t\tif (this.currentClassIndex >= this.resultsResponse.cmpResults.length - 1) {\n\n\t\t\t\t\t\t// Rewind back to the first class\n\t\t\t\t\t\tthis.currentClassIndex = 0;\n\n\t\t\t\t\t\t// Reset the scroll on all classes\n\t\t\t\t\t\tfor (var i = 0; i <= this.resultsResponse.cmpResults.length; i++) {\n\t\t\t\t\t\t\tconst clsName = this.resultsResponse.cmpResults[i].clsName;\n\t\t\t\t\t\t\tthis.$refs[clsName][0].scrollTop = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if the next class has results to show\n\t\t\t\t\twhile (this.resultsResponse.cmpResults[this.currentClassIndex].clsResults == 0) {\n\n\t\t\t\t\t\t// If not, increment currentClassIndex and check again\n\t\t\t\t\t\tthis.currentClassIndex += 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}, 5000)\n\n\t\t},\n\n\t\tfilters: {\n\n\t\t\t// Format the time for display\n\t\t\tformatAbsoluteDiff: function(t) {\n\t\t\t\t\n\t\t\t\tif (t) {\n\n\t\t\t\t\t// Convert into seconds\n\t\t\t\t\tt = t / 10;\n\n\t\t\t\t\t// Format the time\n\t\t\t\t\tvar m, s;\n\t\t\t\t\tm = (Math.floor(Math.abs(t/60)).toString());\n\t\t\t\t\ts = (Math.floor(Math.abs(t%60)).toString().padStart(2, '0'));\n\n\t\t\t\t\t// If negative, they are faster\n\t\t\t\t\tif (t < 0) {\n\t\t\t\t\t\treturn `-${m}:${s}`;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If positive, they are slower\n\t\t\t\t\telse if (t > 0) {\n\t\t\t\t\t\treturn `+${m}:${s}`;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t\t// Format the time for display\n\t\t\tformatAbsoluteTime: function(t) {\n\t\t\t\t\n\t\t\t\tif (t) {\n\n\t\t\t\t\t// Convert into seconds\n\t\t\t\t\tt = t / 10;\n\n\t\t\t\t\t// Format the time\n\t\t\t\t\tvar m, s;\n\t\t\t\t\tm = (Math.floor(Math.abs(t/60)).toString());\n\t\t\t\t\ts = (Math.floor(Math.abs(t%60)).toString().padStart(2, '0'));\n\n\t\t\t\t\treturn `${m}:${s}`;\t\t\t\t\t\t\t\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t},\n\n\t\tmethods: {\n\n\t\t\tasync refreshResults () {\n\n\t\t\t\t// Get the new results\n\t\t\t\tthis.resultsResponse = await meosResultsApi.getOverallStandings();\n\n\t\t\t},\n\n\t\t\t// Calculates the competitors elapsed time\n\t\t\tcalculateElapsedTime(competitorStartTime) {\n\n\t\t\t\t// Check that we have a time\n\t\t\t\tif (competitorStartTime) {\n\n\t\t\t\t\t// Time of day in 10ths of seconds\n\t\t\t\t\tconst { now } = this;\n\t\t\t\t\tconst currentTimeSecs = (now.getSeconds() + (60 * now.getMinutes()) + (60 * 60 * now.getHours())) * 10;\n\n\t\t\t\t\t// Calculate elapsed running time, we need to do this as all the radio times are relative to that competitor's running time,\n\t\t\t\t\t// not absolute time\n\t\t\t\t\tconst elapsedRunningTime = currentTimeSecs - competitorStartTime;\n\n\t\t\t\t\t// Return the time\n\t\t\t\t\treturn elapsedRunningTime;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t\t// Calculates the difference between two times\n\t\t\tcalculateDiffToLeader(secs) {\n\n\t\t\t\t// Determine the difference - all times are in seconds (not 10ths of seconds)\n\t\t\t\tconst diff = (secs - this.resultsResponse.radioResults[0].radioTime);\n\n\t\t\t\t// Return the diff\n\t\t\t\treturn diff;\n\n\t\t\t},\n\n\t\t\t// Displays the distance info (if available) for a particular radio\n\t\t\tformatDistance(d) {\n\n\t\t\t\t// Convert the distance in meters into km for display, rounded to 1dp\n\t\t\t\tvar distanceInKm = parseFloat(d / 1000).toFixed(1);\n\n\t\t\t\t// Return the distance\n\t\t\t\treturn distanceInKm;\n\n\t\t\t},\n\n\t\t\t// Calculates how many padding table rows we need to take it up to a multiple of 10\n\t\t\tcalculatePaddingRows(resultRowCount) {\n\n\t\t\t\treturn (Math.ceil(resultRowCount / 10) * 10) - resultRowCount;\n\n\t\t\t},\n\n\t\t\tscrollNextResultsPage(clsName, currentPage) {\n\n\t\t\t\t//t = current time\n\t\t\t\t//b = start value\n\t\t\t\t//c = change in value\n\t\t\t\t//d = duration\n\t\t\t\tvar easeInOutQuad = function (t, b, c, d) {\n\t\t\t\t\tt /= d/2;\n\t\t\t\t\tif (t < 1) return c/2*t*t + b;\n\t\t\t\t\tt--;\n\t\t\t\t\treturn -c/2 * (t*(t-2) - 1) + b;\n\t\t\t\t};\n\n\t\t\t\tvar element = this.$refs[clsName][0];\n\n\t\t\t\tvar to = 441;\n\t\t\t\tif (currentPage > 1) {\n\t\t\t\t\tto = -((currentPage - 2) * 441);\n\t\t\t\t}\n\n\t\t\t\tvar duration = 600;\n\n\t\t\t\tvar start = element.scrollTop,\n\t\t\t\t\tchange = start + to,\n\t\t\t\t\tcurrentTime = 0,\n\t\t\t\t\tincrement = 20;\n\n\t\t\t\tvar animateScroll = function(){        \n\t\t\t\t\tcurrentTime += increment;\n\t\t\t\t\tvar val = easeInOutQuad(currentTime, start, change, duration);\n\t\t\t\t\telement.scrollTop = val;\n\t\t\t\t\tif(currentTime < duration) {\n\t\t\t\t\t\tsetTimeout(animateScroll, increment);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tanimateScroll();\n\n\t\t\t},\n\n\t\t\tshowResultsContainer(clsIndex) {\n\n\t\t\t\tif (clsIndex == this.currentClassIndex)\n\t\t\t\t\treturn 'show';\n\n\t\t\t\treturn '';\n\n\t\t\t},\n\n\t\t}\n\n\t}\n\n</script>"],"sourceRoot":"src/components/BroadcastGraphics"}]}