{"remainingRequest":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/src/components/BroadcastGraphics/LatestPunches.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/src/components/BroadcastGraphics/LatestPunches.vue","mtime":1568545481000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport meosResultsApi from '@/meos-results-api'\nimport Velocity from 'velocity-animate'\n\nexport default {\n\n\tdata() {\n\t\treturn {\n\t\t\tresultsResponse: [],\n\t\t\tradioId: this.$route.params.radioId,\n\t\t\tptb: 7,\n\t\t\tmh: 45,\n\t\t}\n\t},\n\n\tcreated () {\n\n\t\t\n\t\n\t},\n\n\tmounted() {\n\t\t\n\t\t// Refresh the results from the API\n\t\tthis.refreshResults();\n\n\t\t// Update the display\n\t\tconst updateLoop = () => {\n\t\t\tconst nowMs = +new Date()\n\t\t\tconst updateIntervalMs = 1000;\n\t\t\tconst delay = Math.floor(nowMs / 1000) * 1000 - nowMs + updateIntervalMs\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.refreshResults()\n\t\t\t\tupdateLoop()\n\n\t\t\t}, delay)\n\t\t}\n\n\t\t// Start the update loop\n\t\tupdateLoop()\n\n\t},\n\n\tfilters: {\n\n\t\t// Format the time for display\n\t\tformatAbsoluteDiff: function(t) {\n\t\t\t\n\t\t\tif (t) {\n\n\t\t\t\t// Convert into seconds\n\t\t\t\tt = t / 10;\n\n\t\t\t\t// Format the time\n\t\t\t\tvar m, s;\n\t\t\t\tm = (Math.floor(Math.abs(t/60)).toString());\n\t\t\t\ts = (Math.floor(Math.abs(t%60)).toString().padStart(2, '0'));\n\n\t\t\t\t// If negative, they are faster\n\t\t\t\tif (t < 0) {\n\t\t\t\t\treturn `-${m}:${s}`;\n\t\t\t\t}\n\n\t\t\t\t// If positive, they are slower\n\t\t\t\telse if (t > 0) {\n\t\t\t\t\treturn `+${m}:${s}`;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Format the time for display\n\t\tformatAbsoluteTime: function(t) {\n\t\t\t\n\t\t\tif (t) {\n\n\t\t\t\t// Convert into seconds\n\t\t\t\tt = t / 10;\n\n\t\t\t\t// Format the time\n\t\t\t\tvar m, s;\n\t\t\t\tm = (Math.floor(Math.abs(t/60)).toString());\n\t\t\t\ts = (Math.floor(Math.abs(t%60)).toString().padStart(2, '0'));\n\n\t\t\t\treturn `${m}:${s}`;\t\t\t\t\t\t\t\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t},\n\n\tmethods: {\n\n\t\tasync refreshResults () {\n\n\t\t\t// Get the new results\n\t\t\tif (this.radioId) {\n\t\t\t\tthis.resultsResponse = await meosResultsApi.getLatestPunchesForRadio(this.radioId);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.resultsResponse = await meosResultsApi.getLatestPunches();\n\t\t\t}\n\n\t\t},\n\n\t\t// Calculates the competitors elapsed time\n\t\tcalculateElapsedTime(competitorStartTime) {\n\n\t\t\t// Check that we have a time\n\t\t\tif (competitorStartTime) {\n\n\t\t\t\t// Time of day in 10ths of seconds\n\t\t\t\tconst { now } = this;\n\t\t\t\tconst currentTimeSecs = (now.getSeconds() + (60 * now.getMinutes()) + (60 * 60 * now.getHours())) * 10;\n\n\t\t\t\t// Calculate elapsed running time, we need to do this as all the radio times are relative to that competitor's running time,\n\t\t\t\t// not absolute time\n\t\t\t\tconst elapsedRunningTime = currentTimeSecs - competitorStartTime;\n\n\t\t\t\t// Return the time\n\t\t\t\treturn elapsedRunningTime;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Calculates the difference between two times\n\t\tcalculateDiffToLeader(secs) {\n\n\t\t\t// Determine the difference - all times are in seconds (not 10ths of seconds)\n\t\t\tconst diff = (secs - this.resultsResponse.radioResults[0].radioTime);\n\n\t\t\t// Return the diff\n\t\t\treturn diff;\n\n\t\t},\n\n\t\t// Displays the distance info (if available) for a particular radio\n\t\tformatDistance(d) {\n\n\t\t\t// Convert the distance in meters into km for display, rounded to 1dp\n\t\t\tvar distanceInKm = parseFloat(d / 1000).toFixed(1);\n\n\t\t\t// Return the distance\n\t\t\treturn distanceInKm;\n\n\t\t},\n\n\t\tbeforeEnter(el) {\n\t\t\tlet divs = el.querySelectorAll(\"div\");\n\t\t\tfor (let i = 0; i < divs.length; i++) {\n\t\t\t\tdivs[i].style.maxHeight = \"0px\";\n\t\t\t\tdivs[i].style.paddingTop = \"0px\";\n\t\t\t\tdivs[i].style.paddingBottom = \"0px\";\n\t\t\t}\n\t\t},\n\n\t\tenter(el, done) {\n\t\t\tlet divs = el.querySelectorAll(\"div\");\n\t\t\tVelocity(\n\t\t\t\tdivs,\n\t\t\t\t{ maxHeight: this.mh, paddingTop: this.ptb, paddingBottom: this.ptb },\n\t\t\t\t{ duration: 300, complete: done }\n\t\t\t);\n\t\t},\n\t\t\n\t\tleave(el, done) {\n\t\t\tlet divs = el.querySelectorAll(\"div\");\n\t\t\tVelocity(\n\t\t\t\tdivs,\n\t\t\t\t{ maxHeight: \"0px\", paddingTop: \"0px\", paddingBottom: \"0px\" },\n\t\t\t\t{ duration: 300, complete: done }\n\t\t\t);\n\t\t},\n\n\t}\n\n}\n\n",{"version":3,"sources":["LatestPunches.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+MA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA","file":"LatestPunches.vue","sourceRoot":"src/components/BroadcastGraphics","sourcesContent":["<template>\n\n\t<div id=\"greenScreen\">\n\n\t\t<div id=\"graphicsContainer\">\n\n\t\t\t<table id=\"headingTable\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td><span class=\"latestPunches\">Latest Punches</span><span class=\"location\">{{ resultsResponse.radioInfo.radioId ? 'Control ' + resultsResponse.radioInfo.radioId : 'Finish' }}</span></td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\n\t\t\t<table class=\"punchTable\" id=\"punchTableRight\">\n\n\t\t\t\t<tbody is=\"transition-group\" name=\"punchTableBody\" @enter=\"enter\" @beforeEnter=\"beforeEnter\" @leave=\"leave\" :css=\"false\">\n\n\t\t\t\t\t<tr v-for=\"result in resultsResponse.latestPunches.slice(0, 5)\" class=\"punchRow\" :key=\"result.competitorId\">\n\n\t\t\t\t\t\t<td class=\"rank\"><div>{{ result.rank }}</div></td>\n\t\t\t\t\t\t<td class=\"className\"><div>{{ result.clsName }}</div></td>\n\t\t\t\t\t\t<td class=\"name\"><div>{{ result.name }}</div></td>\n\t\t\t\t\t\t<td class=\"club\"><div>{{ result.club }}</div></td>\n\t\t\t\t\t\t<td class=\"time\"><div>{{ result.time | formatAbsoluteTime }}</div></td>\n\t\t\t\t\t\t<td class=\"diff\"><div>{{ result.diff | formatAbsoluteDiff }}</div></td>\n\n\t\t\t\t\t</tr>\n\n\t\t\t\t</tbody>\n\n\t\t\t</table>\n\n\t\t\t<table class=\"punchTable\" id=\"punchTableLeft\">\n\n\t\t\t\t<tbody is=\"transition-group\" name=\"punchTableBody\" @enter=\"enter\" @beforeEnter=\"beforeEnter\" @leave=\"leave\" :css=\"false\">\n\n\t\t\t\t\t<tr v-for=\"result in resultsResponse.latestPunches.slice(5, 10).reverse()\" class=\"punchRow\" :key=\"result.competitorId\">\n\n\t\t\t\t\t\t<td class=\"rank\"><div>{{ result.rank }}</div></td>\n\t\t\t\t\t\t<td class=\"className\"><div>{{ result.clsName }}</div></td>\n\t\t\t\t\t\t<td class=\"name\"><div>{{ result.name }}</div></td>\n\t\t\t\t\t\t<td class=\"club\"><div>{{ result.club }}</div></td>\n\t\t\t\t\t\t<td class=\"time\"><div>{{ result.time | formatAbsoluteTime }}</div></td>\n\t\t\t\t\t\t<td class=\"diff\"><div>{{ result.diff | formatAbsoluteDiff }}</div></td>\n\n\t\t\t\t\t</tr>\n\n\t\t\t\t</tbody>\n\n\t\t\t</table>\n\n\t\t</div>\n\n\t</div>\n\n</template>\n\n<style scoped>\n\n\t#greenScreen {\n\t\twidth: 1920px;\n\t\theight: 1080px;\n\t\tbackground-color: green;\n\t\tposition: relative;\n\t}\n\n\t#graphicsContainer {\n\t\tfont-family: Roboto;\n\t\t/*background-color: red;*/\n\t\tposition: absolute;\n\t\tbottom: 100px;\n\t\tleft: 90px;\n\t\twidth: 1740px;\n\t\theight: 300px;\n\t\toverflow: hidden;\n\t}\n\n\ttable#headingTable {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0;\n\t\twidth: 845px;\n\t\tbackground-color: #578a84;\n\t\tcolor: white;\n\t\ttext-transform: uppercase;\n\t\theight: 50px;\n\t}\n\n\ttable#headingTable td {\n\t\tpadding-left: 10px;\n\t\tpadding-top: 3px;\n\t}\n\n\ttable#headingTable td .latestPunches {\n\t\tfont-size: 28px;\n\t\tfont-weight: 500;\n\t}\n\n\ttable#headingTable td .location {\n\t\tmargin-left: 20px;\n\t\tfont-size: 18px;\n\t\tfont-weight: 300;\n\t}\n\n\ttable#punchTableRight {\n\t\tposition: absolute;\n\t\tright: 0;\n\t\tbottom: 0;\n\t}\n\n\ttable#punchTableLeft{\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\tbottom: 0;\n\t}\n\n\ttable.punchTable {\n\t\tfont-size: 26px;\t\t\n\t\tborder-collapse: separate;\n\t\tborder-spacing: 0 4px;\n\t\ttext-transform: uppercase;\n\t}\n\n\ttable.punchTable tr td div {\n\t\theight: 45px;\n\t\tbackground-color: white;\n\t}\n\n\ttable.punchTable tr td:first-child div {\n\t\tborder-top-left-radius: 10px;\n\t\tborder-bottom-left-radius: 10px;\n\t}\n\n\ttable.punchTable tr td:last-child div {\n\t\tborder-top-right-radius: 10px;\n\t\tborder-bottom-right-radius: 10px;\n\t}\n\n\ttable.punchTable td {\n\t\tpadding: 0;\n\t}\n\n\ttable.punchTable td div {\n\t\tbox-sizing: border-box;\n\t\tmax-height: 45px;\n\t\toverflow: hidden;\n\t\tpadding-top: 7px;\n\t}\n\n\ttable.punchTable td.rank div {\n\t\twidth: 50px;\n\t\tpadding-right: 3px;\n\t\ttext-align: center;\n\t\tbackground-color: #e65c00;\n\t\tcolor: white;\n\t\tfont-weight: 500;\n\t\tborder-left: 3px solid #e65c00;\n\t\tbox-shadow: -15px 0 15px -15px #525252 inset;\n\t}\n\n\ttable.punchTable td.className div {\n\t\twidth: 100px;\n\t\tpadding-left: 10px;\n\t\ttext-align: center;\n\t\tfont-weight: 300;\n\t\tbox-shadow: -15px 0 15px -15px #828282 inset;\n\t}\n\n\ttable.punchTable td.name div {\n\t\twidth: 420px;\n\t\tpadding-left: 10px;\n\t\tfont-weight: 500;\n\t}\n\n\ttable.punchTable td.club div {\n\t\twidth: 70px;\n\t\tfont-size: 18px;\n\t\ttext-align: center;\n\t\tpadding-top: 11px !important;\n\t\tbox-shadow: 15px 0 15px -15px #828282 inset;\n\t}\n\n\ttable.punchTable td.time div {\n\t\twidth: 120px;\n\t\ttext-align: right;\n\t\tpadding-right: 7px;\n\t\tfont-weight: 500;\n\t\tbackground-color: #e65c00;\n\t\tcolor: white;\n\t\tborder-right: 3px solid #e65c00;\n\t\tbox-shadow: 15px 0 15px -15px #525252 inset;\n\t}\n\n\ttable.punchTable td.diff div {\n\t\twidth: 85px;\n\t\ttext-align: right;\n\t\tpadding-right: 10px;\n\t\tfont-weight: 300;\n\t\tfont-size: 18px;\n\t\tbackground-color: #578a84;\n\t\tcolor: white;\n\t\tpadding-top: 11px !important;\n\t}\n\n</style>\n\n<script>\n\n\timport meosResultsApi from '@/meos-results-api'\n\timport Velocity from 'velocity-animate'\n\n\texport default {\n\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tresultsResponse: [],\n\t\t\t\tradioId: this.$route.params.radioId,\n\t\t\t\tptb: 7,\n\t\t\t\tmh: 45,\n\t\t\t}\n\t\t},\n\n\t\tcreated () {\n\n\t\t\t\n\t\t\n\t\t},\n\n\t\tmounted() {\n\t\t\t\n\t\t\t// Refresh the results from the API\n\t\t\tthis.refreshResults();\n\n\t\t\t// Update the display\n\t\t\tconst updateLoop = () => {\n\t\t\t\tconst nowMs = +new Date()\n\t\t\t\tconst updateIntervalMs = 1000;\n\t\t\t\tconst delay = Math.floor(nowMs / 1000) * 1000 - nowMs + updateIntervalMs\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.refreshResults()\n\t\t\t\t\tupdateLoop()\n\n\t\t\t\t}, delay)\n\t\t\t}\n\n\t\t\t// Start the update loop\n\t\t\tupdateLoop()\n\n\t\t},\n\n\t\tfilters: {\n\n\t\t\t// Format the time for display\n\t\t\tformatAbsoluteDiff: function(t) {\n\t\t\t\t\n\t\t\t\tif (t) {\n\n\t\t\t\t\t// Convert into seconds\n\t\t\t\t\tt = t / 10;\n\n\t\t\t\t\t// Format the time\n\t\t\t\t\tvar m, s;\n\t\t\t\t\tm = (Math.floor(Math.abs(t/60)).toString());\n\t\t\t\t\ts = (Math.floor(Math.abs(t%60)).toString().padStart(2, '0'));\n\n\t\t\t\t\t// If negative, they are faster\n\t\t\t\t\tif (t < 0) {\n\t\t\t\t\t\treturn `-${m}:${s}`;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If positive, they are slower\n\t\t\t\t\telse if (t > 0) {\n\t\t\t\t\t\treturn `+${m}:${s}`;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t\t// Format the time for display\n\t\t\tformatAbsoluteTime: function(t) {\n\t\t\t\t\n\t\t\t\tif (t) {\n\n\t\t\t\t\t// Convert into seconds\n\t\t\t\t\tt = t / 10;\n\n\t\t\t\t\t// Format the time\n\t\t\t\t\tvar m, s;\n\t\t\t\t\tm = (Math.floor(Math.abs(t/60)).toString());\n\t\t\t\t\ts = (Math.floor(Math.abs(t%60)).toString().padStart(2, '0'));\n\n\t\t\t\t\treturn `${m}:${s}`;\t\t\t\t\t\t\t\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t},\n\n\t\tmethods: {\n\n\t\t\tasync refreshResults () {\n\n\t\t\t\t// Get the new results\n\t\t\t\tif (this.radioId) {\n\t\t\t\t\tthis.resultsResponse = await meosResultsApi.getLatestPunchesForRadio(this.radioId);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.resultsResponse = await meosResultsApi.getLatestPunches();\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t// Calculates the competitors elapsed time\n\t\t\tcalculateElapsedTime(competitorStartTime) {\n\n\t\t\t\t// Check that we have a time\n\t\t\t\tif (competitorStartTime) {\n\n\t\t\t\t\t// Time of day in 10ths of seconds\n\t\t\t\t\tconst { now } = this;\n\t\t\t\t\tconst currentTimeSecs = (now.getSeconds() + (60 * now.getMinutes()) + (60 * 60 * now.getHours())) * 10;\n\n\t\t\t\t\t// Calculate elapsed running time, we need to do this as all the radio times are relative to that competitor's running time,\n\t\t\t\t\t// not absolute time\n\t\t\t\t\tconst elapsedRunningTime = currentTimeSecs - competitorStartTime;\n\n\t\t\t\t\t// Return the time\n\t\t\t\t\treturn elapsedRunningTime;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t\t// Calculates the difference between two times\n\t\t\tcalculateDiffToLeader(secs) {\n\n\t\t\t\t// Determine the difference - all times are in seconds (not 10ths of seconds)\n\t\t\t\tconst diff = (secs - this.resultsResponse.radioResults[0].radioTime);\n\n\t\t\t\t// Return the diff\n\t\t\t\treturn diff;\n\n\t\t\t},\n\n\t\t\t// Displays the distance info (if available) for a particular radio\n\t\t\tformatDistance(d) {\n\n\t\t\t\t// Convert the distance in meters into km for display, rounded to 1dp\n\t\t\t\tvar distanceInKm = parseFloat(d / 1000).toFixed(1);\n\n\t\t\t\t// Return the distance\n\t\t\t\treturn distanceInKm;\n\n\t\t\t},\n\n\t\t\tbeforeEnter(el) {\n\t\t\t\tlet divs = el.querySelectorAll(\"div\");\n\t\t\t\tfor (let i = 0; i < divs.length; i++) {\n\t\t\t\t\tdivs[i].style.maxHeight = \"0px\";\n\t\t\t\t\tdivs[i].style.paddingTop = \"0px\";\n\t\t\t\t\tdivs[i].style.paddingBottom = \"0px\";\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tenter(el, done) {\n\t\t\t\tlet divs = el.querySelectorAll(\"div\");\n\t\t\t\tVelocity(\n\t\t\t\t\tdivs,\n\t\t\t\t\t{ maxHeight: this.mh, paddingTop: this.ptb, paddingBottom: this.ptb },\n\t\t\t\t\t{ duration: 300, complete: done }\n\t\t\t\t);\n\t\t\t},\n\t\t\t\n\t\t\tleave(el, done) {\n\t\t\t\tlet divs = el.querySelectorAll(\"div\");\n\t\t\t\tVelocity(\n\t\t\t\t\tdivs,\n\t\t\t\t\t{ maxHeight: \"0px\", paddingTop: \"0px\", paddingBottom: \"0px\" },\n\t\t\t\t\t{ duration: 300, complete: done }\n\t\t\t\t);\n\t\t\t},\n\n\t\t}\n\n\t}\n\n</script>"]}]}