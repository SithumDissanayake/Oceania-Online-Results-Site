{"remainingRequest":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/src/components/BroadcastGraphics/OverallStandings.vue?vue&type=style&index=0&id=34d348ed&scoped=true&lang=css&","dependencies":[{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/src/components/BroadcastGraphics/OverallStandings.vue","mtime":1568545481000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site-/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#greenScreen {\n\twidth: 1920px;\n\theight: 1080px;\n\tbackground-color: green;\n\tposition: relative;\n}\n\n.clsResultsContainer {\n\tposition: absolute;\n\topacity: 0;\n\twidth: 750px;\n\theight: 545px;\n\tleft: 0;\n\tright: 0;\n\ttop: 0;\n\tbottom: 0;\n\tmargin: auto;\n\t/*background-color: red;*/\n\ttransition: opacity 1.0s linear;\n}\n\n.clsResultsContainer.show {\n\topacity: 1;\n}\n\n.clsResultsTableContainer {\n\tposition: absolute;\n\ttop: 98px;\n\twidth: 750px;\n\theight: 445px;\n\toverflow-y: scroll;\t\t\n}\n\n.clsResultsTableContainer::-webkit-scrollbar {\n\twidth: 0px;  /* Remove scrollbar space */\n\tbackground: transparent;  /* Optional: just make scrollbar invisible */\n}\n\ntable.clsResults {\n\tfont-family: Roboto;\n\tfont-size: 26px;\t\t\n\tborder-collapse: separate;\n\tborder-spacing: 0 4px;\n\ttext-transform: uppercase;\n}\n\ntable.clsResults tr {\n\theight: 45px;\n\tbackground-color: white;\n}\n\ntable.clsResults tr.resultHeader {\n\tbackground-color: #578a84;\n\tcolor: white;\n}\n\ntable.clsResults tr.resultHeader td {\n\tpadding: 0 10px;\n}\n\ntable.clsResults tr.resultHeader td .classInfo {\n\tfloat: left;\n\tfont-weight: 500;\n\tmargin-top: 2px;\n}\n\ntable.clsResults tr.resultHeader td .classInfo .courseDistance {\n\tfont-weight: 300;\n\tpadding-left: 20px;\n\tfont-size: 18px;\n}\n\ntable.clsResults tr.resultHeader td .resultsInfo {\n\tfloat: right;\n\tpadding-left: 30px;\n\tfont-weight: 300;\n\tmargin-top: 2px;\n}\n\ntable.clsResults tr.paddingRow {\n\tbackground-color: transparent;\n}\n\ntable.clsResults tr.resultRow td.rank {\n\twidth: 50px;\n\tpadding-right: 3px;\n\ttext-align: center;\n\tbackground-color: #e65c00;\n\tcolor: white;\n\tfont-weight: 500;\n\tborder-left: 3px solid #e65c00;\n}\n\ntable.clsResults tr.resultRow.firstPlace td.rank {\n\tbackground-color: #CFB53B;\n\tborder-left: 3px solid #CFB53B;\n}\n\ntable.clsResults tr.resultRow td.name {\n\twidth: 450px;\n\tpadding-left: 10px;\n}\n\ntable.clsResults tr.resultRow td.club {\n\twidth: 100px;\n\ttext-align: center;\n\tfont-weight: 300;\n}\n\ntable.clsResults tr.resultRow td.time {\n\twidth: 150px;\n\ttext-align: right;\n\tpadding-right: 7px;\n\tfont-weight: 500;\n\tbackground-color: #e65c00;\n\tcolor: white;\n\tborder-right: 3px solid #e65c00;\n}\n\ntable.clsResults tr.resultRow.firstPlace td.time {\n\tbackground-color: #CFB53B;\n\tborder-right: 3px solid #CFB53B;\n}\n\n",{"version":3,"sources":["OverallStandings.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"OverallStandings.vue","sourceRoot":"src/components/BroadcastGraphics","sourcesContent":["<template>\n\n\t<div id=\"greenScreen\">\n\n\t\t<template v-for=\"(cls, index) in resultsResponse.cmpResults\">\n\n\t\t\t<div class=\"clsResultsContainer\" :id=\"cls.clsName\" :key=\"cls.clsId\" v-bind:class=\"showResultsContainer(index)\">\n\n\t\t\t\t<table class=\"clsResults\">\n\t\t\t\t\t<tr class=\"resultHeader\">\n\t\t\t\t\t\t<td colspan=\"4\"><div class=\"classInfo\"><span class=\"className\">{{ cls.clsName }}</span><span class=\"courseDistance\">{{ cls.course }} â€¢ {{ formatDistance(cls.length) }} km</span></div><div class=\"resultsInfo\">Standings at Finish</div></td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr v-for=\"result in cls.clsResults.slice(0,1)\" :key=\"result.competitorId\" class=\"resultRow firstPlace\">\n\t\t\t\t\t\t<td class=\"rank\">{{ result.rank }}</td>\n\t\t\t\t\t\t<td class=\"name\">{{ result.name }}</td>\n\t\t\t\t\t\t<td class=\"club\">{{ result.club }}</td>\n\t\t\t\t\t\t<td class=\"time\">{{ result.time | formatAbsoluteTime }}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\n\t\t\t\t<div class=\"clsResultsTableContainer\" v-bind:ref=\"cls.clsName\">\n\n\t\t\t\t\t<table class=\"clsResults\">\n\n\t\t\t\t\t\t<tr v-for=\"result in cls.clsResults.slice(1)\" :key=\"result.competitorId\" class=\"resultRow\">\n\n\t\t\t\t\t\t\t<td class=\"rank\">{{ result.rank }}</td>\n\t\t\t\t\t\t\t<td class=\"name\">{{ result.name }}</td>\n\t\t\t\t\t\t\t<td class=\"club\">{{ result.club }}</td>\n\t\t\t\t\t\t\t<td class=\"time\">{{ result.diff | formatAbsoluteDiff }}</td>\n\n\t\t\t\t\t\t</tr>\n\n\t\t\t\t\t\t<!-- these are the padding rows to take it to a multiple of 10, so the scroll looks nice -->\n\t\t\t\t\t\t<tr class=\"paddingRow\" v-for=\"n in calculatePaddingRows(cls.clsResults.length)\" :key=\"n\">\n\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t</tr>\n\n\t\t\t\t\t</table>\n\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t</template>\n\n\t</div>\n\n</template>\n\n<style scoped>\n\n\t#greenScreen {\n\t\twidth: 1920px;\n\t\theight: 1080px;\n\t\tbackground-color: green;\n\t\tposition: relative;\n\t}\n\n\t.clsResultsContainer {\n\t\tposition: absolute;\n\t\topacity: 0;\n\t\twidth: 750px;\n\t\theight: 545px;\n\t\tleft: 0;\n\t\tright: 0;\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\tmargin: auto;\n\t\t/*background-color: red;*/\n\t\ttransition: opacity 1.0s linear;\n\t}\n\n\t.clsResultsContainer.show {\n\t\topacity: 1;\n\t}\n\n\t.clsResultsTableContainer {\n\t\tposition: absolute;\n\t\ttop: 98px;\n\t\twidth: 750px;\n\t\theight: 445px;\n\t\toverflow-y: scroll;\t\t\n\t}\n\n\t.clsResultsTableContainer::-webkit-scrollbar {\n\t\twidth: 0px;  /* Remove scrollbar space */\n\t\tbackground: transparent;  /* Optional: just make scrollbar invisible */\n\t}\n\n\ttable.clsResults {\n\t\tfont-family: Roboto;\n\t\tfont-size: 26px;\t\t\n\t\tborder-collapse: separate;\n\t\tborder-spacing: 0 4px;\n\t\ttext-transform: uppercase;\n\t}\n\n\ttable.clsResults tr {\n\t\theight: 45px;\n\t\tbackground-color: white;\n\t}\n\n\ttable.clsResults tr.resultHeader {\n\t\tbackground-color: #578a84;\n\t\tcolor: white;\n\t}\n\n\ttable.clsResults tr.resultHeader td {\n\t\tpadding: 0 10px;\n\t}\n\n\ttable.clsResults tr.resultHeader td .classInfo {\n\t\tfloat: left;\n\t\tfont-weight: 500;\n\t\tmargin-top: 2px;\n\t}\n\n\ttable.clsResults tr.resultHeader td .classInfo .courseDistance {\n\t\tfont-weight: 300;\n\t\tpadding-left: 20px;\n\t\tfont-size: 18px;\n\t}\n\n\ttable.clsResults tr.resultHeader td .resultsInfo {\n\t\tfloat: right;\n\t\tpadding-left: 30px;\n\t\tfont-weight: 300;\n\t\tmargin-top: 2px;\n\t}\n\n\ttable.clsResults tr.paddingRow {\n\t\tbackground-color: transparent;\n\t}\n\n\ttable.clsResults tr.resultRow td.rank {\n\t\twidth: 50px;\n\t\tpadding-right: 3px;\n\t\ttext-align: center;\n\t\tbackground-color: #e65c00;\n\t\tcolor: white;\n\t\tfont-weight: 500;\n\t\tborder-left: 3px solid #e65c00;\n\t}\n\n\ttable.clsResults tr.resultRow.firstPlace td.rank {\n\t\tbackground-color: #CFB53B;\n\t\tborder-left: 3px solid #CFB53B;\n\t}\n\n\ttable.clsResults tr.resultRow td.name {\n\t\twidth: 450px;\n\t\tpadding-left: 10px;\n\t}\n\n\ttable.clsResults tr.resultRow td.club {\n\t\twidth: 100px;\n\t\ttext-align: center;\n\t\tfont-weight: 300;\n\t}\n\n\ttable.clsResults tr.resultRow td.time {\n\t\twidth: 150px;\n\t\ttext-align: right;\n\t\tpadding-right: 7px;\n\t\tfont-weight: 500;\n\t\tbackground-color: #e65c00;\n\t\tcolor: white;\n\t\tborder-right: 3px solid #e65c00;\n\t}\n\n\ttable.clsResults tr.resultRow.firstPlace td.time {\n\t\tbackground-color: #CFB53B;\n\t\tborder-right: 3px solid #CFB53B;\n\t}\n\n</style>\n\n<script>\n\n\timport meosResultsApi from '@/meos-results-api'\n\n\texport default {\n\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tresultsResponse: [],\n\t\t\t\tcurrentClassIndex: 0, // index from resultsResponse of the current class being displayed\n\t\t\t\tcurrentClassPage: 1, // the current page of that class being displayed\n\t\t\t}\n\t\t},\n\n\t\tcreated () {\n\n\t\t\t// Refresh the results from the API\n\t\t\tthis.refreshResults();\n\n\t\t\t// Update the display\n\t\t\tconst updateLoop = () => {\n\t\t\t\tconst nowMs = +new Date()\n\t\t\t\tconst updateIntervalMs = 1000;\n\t\t\t\tconst delay = Math.floor(nowMs / 1000) * 1000 - nowMs + updateIntervalMs\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.refreshResults()\n\t\t\t\t\tupdateLoop()\n\n\t\t\t\t}, delay)\n\t\t\t}\n\n\t\t\t// Start the update loop\n\t\t\tupdateLoop()\n\n\t\t\t\n\t\t\t// Scroll/transition the results\n\t\t\tsetInterval(() => {\n\n\t\t\t\t// DEBUG - stop after one scroll\n\t\t\t\t// clearInterval(transitionInterval);\n\n\t\t\t\t// Get a reference to the class object for the current class\n\t\t\t\tconst clsObj = this.resultsResponse.cmpResults[this.currentClassIndex];\n\n\t\t\t\t// Check how many pages are in this class\n\t\t\t\tconst totalPages = (Math.ceil(clsObj.clsResults.length / 10) * 10) / 10;\n\t\t\t\t\n\t\t\t\t// Check if we still have pages to go?\n\t\t\t\tif (this.currentClassPage < totalPages) {\n\n\t\t\t\t\t// Scroll to the next page\n\t\t\t\t\tthis.scrollNextResultsPage(clsObj.clsName, this.currentClassPage);\n\n\t\t\t\t\t// Increment currentClassPage\n\t\t\t\t\tthis.currentClassPage += 1;\n\n\t\t\t\t}\n\n\t\t\t\t// We're at the end of the pages for this class\n\t\t\t\telse {\n\n\t\t\t\t\t// Reset currentClassPage\n\t\t\t\t\tthis.currentClassPage = 1;\n\n\t\t\t\t\t// Increment currentClassIndex\n\t\t\t\t\tthis.currentClassIndex += 1;\n\n\t\t\t\t\t// Check if we have reached the end of the results\n\t\t\t\t\tif (this.currentClassIndex >= this.resultsResponse.cmpResults.length - 1) {\n\n\t\t\t\t\t\t// Rewind back to the first class\n\t\t\t\t\t\tthis.currentClassIndex = 0;\n\n\t\t\t\t\t\t// Reset the scroll on all classes\n\t\t\t\t\t\tfor (var i = 0; i <= this.resultsResponse.cmpResults.length; i++) {\n\t\t\t\t\t\t\tconst clsName = this.resultsResponse.cmpResults[i].clsName;\n\t\t\t\t\t\t\tthis.$refs[clsName][0].scrollTop = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if the next class has results to show\n\t\t\t\t\twhile (this.resultsResponse.cmpResults[this.currentClassIndex].clsResults == 0) {\n\n\t\t\t\t\t\t// If not, increment currentClassIndex and check again\n\t\t\t\t\t\tthis.currentClassIndex += 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}, 5000)\n\n\t\t},\n\n\t\tfilters: {\n\n\t\t\t// Format the time for display\n\t\t\tformatAbsoluteDiff: function(t) {\n\t\t\t\t\n\t\t\t\tif (t) {\n\n\t\t\t\t\t// Convert into seconds\n\t\t\t\t\tt = t / 10;\n\n\t\t\t\t\t// Format the time\n\t\t\t\t\tvar m, s;\n\t\t\t\t\tm = (Math.floor(Math.abs(t/60)).toString());\n\t\t\t\t\ts = (Math.floor(Math.abs(t%60)).toString().padStart(2, '0'));\n\n\t\t\t\t\t// If negative, they are faster\n\t\t\t\t\tif (t < 0) {\n\t\t\t\t\t\treturn `-${m}:${s}`;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If positive, they are slower\n\t\t\t\t\telse if (t > 0) {\n\t\t\t\t\t\treturn `+${m}:${s}`;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t\t// Format the time for display\n\t\t\tformatAbsoluteTime: function(t) {\n\t\t\t\t\n\t\t\t\tif (t) {\n\n\t\t\t\t\t// Convert into seconds\n\t\t\t\t\tt = t / 10;\n\n\t\t\t\t\t// Format the time\n\t\t\t\t\tvar m, s;\n\t\t\t\t\tm = (Math.floor(Math.abs(t/60)).toString());\n\t\t\t\t\ts = (Math.floor(Math.abs(t%60)).toString().padStart(2, '0'));\n\n\t\t\t\t\treturn `${m}:${s}`;\t\t\t\t\t\t\t\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t},\n\n\t\tmethods: {\n\n\t\t\tasync refreshResults () {\n\n\t\t\t\t// Get the new results\n\t\t\t\tthis.resultsResponse = await meosResultsApi.getOverallStandings();\n\n\t\t\t},\n\n\t\t\t// Calculates the competitors elapsed time\n\t\t\tcalculateElapsedTime(competitorStartTime) {\n\n\t\t\t\t// Check that we have a time\n\t\t\t\tif (competitorStartTime) {\n\n\t\t\t\t\t// Time of day in 10ths of seconds\n\t\t\t\t\tconst { now } = this;\n\t\t\t\t\tconst currentTimeSecs = (now.getSeconds() + (60 * now.getMinutes()) + (60 * 60 * now.getHours())) * 10;\n\n\t\t\t\t\t// Calculate elapsed running time, we need to do this as all the radio times are relative to that competitor's running time,\n\t\t\t\t\t// not absolute time\n\t\t\t\t\tconst elapsedRunningTime = currentTimeSecs - competitorStartTime;\n\n\t\t\t\t\t// Return the time\n\t\t\t\t\treturn elapsedRunningTime;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t\t// Calculates the difference between two times\n\t\t\tcalculateDiffToLeader(secs) {\n\n\t\t\t\t// Determine the difference - all times are in seconds (not 10ths of seconds)\n\t\t\t\tconst diff = (secs - this.resultsResponse.radioResults[0].radioTime);\n\n\t\t\t\t// Return the diff\n\t\t\t\treturn diff;\n\n\t\t\t},\n\n\t\t\t// Displays the distance info (if available) for a particular radio\n\t\t\tformatDistance(d) {\n\n\t\t\t\t// Convert the distance in meters into km for display, rounded to 1dp\n\t\t\t\tvar distanceInKm = parseFloat(d / 1000).toFixed(1);\n\n\t\t\t\t// Return the distance\n\t\t\t\treturn distanceInKm;\n\n\t\t\t},\n\n\t\t\t// Calculates how many padding table rows we need to take it up to a multiple of 10\n\t\t\tcalculatePaddingRows(resultRowCount) {\n\n\t\t\t\treturn (Math.ceil(resultRowCount / 10) * 10) - resultRowCount;\n\n\t\t\t},\n\n\t\t\tscrollNextResultsPage(clsName, currentPage) {\n\n\t\t\t\t//t = current time\n\t\t\t\t//b = start value\n\t\t\t\t//c = change in value\n\t\t\t\t//d = duration\n\t\t\t\tvar easeInOutQuad = function (t, b, c, d) {\n\t\t\t\t\tt /= d/2;\n\t\t\t\t\tif (t < 1) return c/2*t*t + b;\n\t\t\t\t\tt--;\n\t\t\t\t\treturn -c/2 * (t*(t-2) - 1) + b;\n\t\t\t\t};\n\n\t\t\t\tvar element = this.$refs[clsName][0];\n\n\t\t\t\tvar to = 441;\n\t\t\t\tif (currentPage > 1) {\n\t\t\t\t\tto = -((currentPage - 2) * 441);\n\t\t\t\t}\n\n\t\t\t\tvar duration = 600;\n\n\t\t\t\tvar start = element.scrollTop,\n\t\t\t\t\tchange = start + to,\n\t\t\t\t\tcurrentTime = 0,\n\t\t\t\t\tincrement = 20;\n\n\t\t\t\tvar animateScroll = function(){        \n\t\t\t\t\tcurrentTime += increment;\n\t\t\t\t\tvar val = easeInOutQuad(currentTime, start, change, duration);\n\t\t\t\t\telement.scrollTop = val;\n\t\t\t\t\tif(currentTime < duration) {\n\t\t\t\t\t\tsetTimeout(animateScroll, increment);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tanimateScroll();\n\n\t\t\t},\n\n\t\t\tshowResultsContainer(clsIndex) {\n\n\t\t\t\tif (clsIndex == this.currentClassIndex)\n\t\t\t\t\treturn 'show';\n\n\t\t\t\treturn '';\n\n\t\t\t},\n\n\t\t}\n\n\t}\n\n</script>"]}]}