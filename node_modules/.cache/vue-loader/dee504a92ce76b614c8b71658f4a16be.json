{"remainingRequest":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/src/components/BroadcastGraphics/SplitControl.vue?vue&type=style&index=0&id=2f526a14&scoped=true&lang=css&","dependencies":[{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/src/components/BroadcastGraphics/SplitControl.vue","mtime":1568545481000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sithum/Documents/GitHub/Oceania-Online-Results-Site/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#greenScreen {\n\twidth: 1920px;\n\theight: 1080px;\n\tbackground-color: green;\n\tposition: relative;\n}\n\n\n\n#graphicsContainer {\n\t/*background-color: red;*/\n\tposition: absolute;\n\tbottom: 100px;\n\tleft: 100px;\n\twidth: 640px;\n\theight: 198px;\n\toverflow: hidden;\n}\n\n\n\n#splitResults, #radioInfo, #runnerInfo {\n\tfont-family: Roboto;\n\tfont-size: 26px;\t\t\n\tborder-collapse: separate;\n\tborder-spacing: 0 4px;\n}\n\n\n\n#splitResults {\n\tposition: absolute;\n\ttop: 198px;\n\ttransition: top 1.0s ease-in-out;\n}\n\n#splitResults.show {\n\ttop: 0px;\n}\n\n#splitResults tr {\n\theight: 45px;\n\tbackground-color: white;\n}\n\n#splitResults tr td.rank {\n\twidth: 60px;\n\tpadding-right: 3px;\n\ttext-align: center;\n\tbackground-color: #e65c00;\n\tcolor: white;\n\tfont-weight: 500;\n\tborder-left: 3px solid #e65c00;\n}\n\n#splitResults tr td.name {\n\twidth: 360px;\n\ttext-transform: uppercase;\n\tfont-weight: 600;\n\tpadding: 0 10px;\n}\n\n#splitResults tr td.club {\n\twidth: 100px;\n\ttext-align: center;\n\t/*background-color: red;*/\n\tfont-weight: 300;\n}\n\n#splitResults tr td.time {\n\twidth: 110px;\n\ttext-align: right;\n\tpadding-right: 7px;\n\tfont-weight: 500;\n\tbackground-color: #e65c00;\n\tcolor: white;\n\tborder-right: 3px solid #e65c00;\n}\n\n\n\n#radioInfo {\n\twidth: 640px;\n\tposition: absolute;\n\tbottom: -5px;\n\topacity: 0;\n\ttransition: opacity 1.0s linear;\n}\n\n#radioInfo.show {\n\topacity: 1;\n}\n\n#radioInfo tr {\n\theight: 45px;\n}\n\n#radioInfo tr td {\n\theight: 45px;\n\ttext-transform: uppercase;\n\tpadding: 0 10px;\n\tpadding-top: 2px;\n\tbackground-color: #578a84;\n\tcolor: white;\n\tborder-right: 3px solid #578a84;\n\tborder-left: 3px solid #578a84;\n\tbackground-image: url('/images/orienteering-australia.png');\n\tbackground-size: 175px auto;\n\tbackground-position: center right;\n\tbackground-repeat: no-repeat;\n}\n\n#radioInfo tr td .className {\n\tfont-weight: 600;\n}\n\n#radioInfo tr td .radioDetails {\n\tpadding-left: 15px;\n\tfont-weight: 400;\n}\n\n\n\n#runnerInfo {\n\twidth: 640px;\n\tposition: absolute;\n\tbottom: -5px;\n\topacity: 0;\n\ttransition: opacity 1.0s linear;\n}\n\n#runnerInfo.show {\n\topacity: 1;\n}\n\n#runnerInfo tr {\n\theight: 45px;\n}\n\n#runnerInfo tr td.name {\n\twidth: 300px;\n\ttext-transform: uppercase;\n\tfont-weight: 600;\n\tpadding: 0 10px;\n\tbackground-color: white;\n}\n\n#runnerInfo tr td.class {\n\twidth: 100px;\n\ttext-align: right;\n\tpadding-right: 20px;\n\tbackground-color: white;\n}\n\n#runnerInfo tr td.time {\n\twidth: 100px;\n\ttext-align: right;\n\tpadding-right: 7px;\n\tfont-weight: 500;\n\tbackground-color: #e65c00;\n\tcolor: white;\n\tborder-right: 3px solid #e65c00;\n}\n\n",{"version":3,"sources":["SplitControl.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SplitControl.vue","sourceRoot":"src/components/BroadcastGraphics","sourcesContent":["<template>\n\n\t<div id=\"greenScreen\">\n\n\t\t<div id=\"graphicsContainer\">\n\n\t\t\t<table id=\"splitResults\" v-bind:class=\"{ show : showSplits }\">\n\n\t\t\t\t<tr v-for=\"result in resultsToDisplay\" v-if=\"result != null\" v-bind:key=\"result.competitorId\" v-bind:class=\"{'highlightCompetitor' : result.competitorId == competitorId}\">\n\t\t\t\t\t<td class=\"rank\">{{ result.rank }} </td>\n\t\t\t\t\t<td class=\"name\">{{ result.name }}</td>\n\t\t\t\t\t<td class=\"club\">{{ result.club }}</td>\n\t\t\t\t\t<td class=\"time\" v-if=\"result.diff != null && result.diff != 0\">{{ result.diff | formatAbsoluteDiff }}</td> <!-- punched, not the leader -->\n\t\t\t\t\t<td class=\"time\" v-else-if=\"result.diff == 0\">{{ result.radioTime | formatAbsoluteTime }}</td> <!-- punched, the leader -->\n\t\t\t\t\t<td class=\"time\" v-else-if=\"calculateDiffToLeader(calculateElapsedTime(resultsResponse.competitor.startTime)) == 0\">0:00</td> <!-- not punched, still going. this gets around the filter not correctly printing 0:00 -->\n\t\t\t\t\t<td class=\"time\" v-else>{{ calculateDiffToLeader(calculateElapsedTime(resultsResponse.competitor.startTime)) | formatAbsoluteDiff }}</td> <!-- not punched, still going -->\n\t\t\t\t</tr>\n\n\t\t\t\t<tr v-else>\n\t\t\t\t\t<td class=\"rank\"></td>\n\t\t\t\t\t<td class=\"name\"></td>\n\t\t\t\t\t<td class=\"club\"></td>\n\t\t\t\t\t<td class=\"time\"></td>\n\t\t\t\t</tr>\n\n\t\t\t</table>\n\n\t\t\t<table id=\"radioInfo\" v-bind:class=\"{ show : showSplits }\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span class=\"className\">{{ resultsResponse.competitor.clsName }}</span>\n\t\t\t\t\t\t<span class=\"radioDetails\">{{ resultsResponse.radioInfo.radioName }} &mdash; {{ formatDistance(resultsResponse.radioInfo.distance) }} km {{ (resultsResponse.radioInfo.radioName == \"Finish\" ? '' : '(' + resultsResponse.radioInfo.percentage + '%)') }}</span>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\n\t\t\t<table id=\"runnerInfo\" v-bind:class=\"{ show : showSplits == false }\">\t\t\t\t\n\t\t\t\t<tr>\n\t\t\t\t\t<td class=\"name\">{{ resultsResponse.competitor.name }}</td>\n\t\t\t\t\t<td class=\"class\">{{ resultsResponse.competitor.clsName }}</td>\n\t\t\t\t\t<td class=\"time\">{{ calculateElapsedTime(resultsResponse.competitor.startTime) | formatAbsoluteTime }}</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\n\t\t</div>\n\n\t</div>\n\n</template>\n\n<style scoped>\n\n\t#greenScreen {\n\t\twidth: 1920px;\n\t\theight: 1080px;\n\t\tbackground-color: green;\n\t\tposition: relative;\n\t}\n\n\n\n\t#graphicsContainer {\n\t\t/*background-color: red;*/\n\t\tposition: absolute;\n\t\tbottom: 100px;\n\t\tleft: 100px;\n\t\twidth: 640px;\n\t\theight: 198px;\n\t\toverflow: hidden;\n\t}\n\n\n\n\t#splitResults, #radioInfo, #runnerInfo {\n\t\tfont-family: Roboto;\n\t\tfont-size: 26px;\t\t\n\t\tborder-collapse: separate;\n\t\tborder-spacing: 0 4px;\n\t}\n\n\n\n\t#splitResults {\n\t\tposition: absolute;\n\t\ttop: 198px;\n\t\ttransition: top 1.0s ease-in-out;\n\t}\n\n\t#splitResults.show {\n\t\ttop: 0px;\n\t}\n\n\t#splitResults tr {\n\t\theight: 45px;\n\t\tbackground-color: white;\n\t}\n\n\t#splitResults tr td.rank {\n\t\twidth: 60px;\n\t\tpadding-right: 3px;\n\t\ttext-align: center;\n\t\tbackground-color: #e65c00;\n\t\tcolor: white;\n\t\tfont-weight: 500;\n\t\tborder-left: 3px solid #e65c00;\n\t}\n\n\t#splitResults tr td.name {\n\t\twidth: 360px;\n\t\ttext-transform: uppercase;\n\t\tfont-weight: 600;\n\t\tpadding: 0 10px;\n\t}\n\n\t#splitResults tr td.club {\n\t\twidth: 100px;\n\t\ttext-align: center;\n\t\t/*background-color: red;*/\n\t\tfont-weight: 300;\n\t}\n\n\t#splitResults tr td.time {\n\t\twidth: 110px;\n\t\ttext-align: right;\n\t\tpadding-right: 7px;\n\t\tfont-weight: 500;\n\t\tbackground-color: #e65c00;\n\t\tcolor: white;\n\t\tborder-right: 3px solid #e65c00;\n\t}\n\n\n\n\t#radioInfo {\n\t\twidth: 640px;\n\t\tposition: absolute;\n\t\tbottom: -5px;\n\t\topacity: 0;\n\t\ttransition: opacity 1.0s linear;\n\t}\n\n\t#radioInfo.show {\n\t\topacity: 1;\n\t}\n\n\t#radioInfo tr {\n\t\theight: 45px;\n\t}\n\n\t#radioInfo tr td {\n\t\theight: 45px;\n\t\ttext-transform: uppercase;\n\t\tpadding: 0 10px;\n\t\tpadding-top: 2px;\n\t\tbackground-color: #578a84;\n\t\tcolor: white;\n\t\tborder-right: 3px solid #578a84;\n\t\tborder-left: 3px solid #578a84;\n\t\tbackground-image: url('/images/orienteering-australia.png');\n\t\tbackground-size: 175px auto;\n\t\tbackground-position: center right;\n\t\tbackground-repeat: no-repeat;\n\t}\n\n\t#radioInfo tr td .className {\n\t\tfont-weight: 600;\n\t}\n\n\t#radioInfo tr td .radioDetails {\n\t\tpadding-left: 15px;\n\t\tfont-weight: 400;\n\t}\n\n\n\n\t#runnerInfo {\n\t\twidth: 640px;\n\t\tposition: absolute;\n\t\tbottom: -5px;\n\t\topacity: 0;\n\t\ttransition: opacity 1.0s linear;\n\t}\n\n\t#runnerInfo.show {\n\t\topacity: 1;\n\t}\n\n\t#runnerInfo tr {\n\t\theight: 45px;\n\t}\n\n\t#runnerInfo tr td.name {\n\t\twidth: 300px;\n\t\ttext-transform: uppercase;\n\t\tfont-weight: 600;\n\t\tpadding: 0 10px;\n\t\tbackground-color: white;\n\t}\n\n\t#runnerInfo tr td.class {\n\t\twidth: 100px;\n\t\ttext-align: right;\n\t\tpadding-right: 20px;\n\t\tbackground-color: white;\n\t}\n\n\t#runnerInfo tr td.time {\n\t\twidth: 100px;\n\t\ttext-align: right;\n\t\tpadding-right: 7px;\n\t\tfont-weight: 500;\n\t\tbackground-color: #e65c00;\n\t\tcolor: white;\n\t\tborder-right: 3px solid #e65c00;\n\t}\n\n</style>\n\n<script>\n\n\timport meosResultsApi from '@/meos-results-api'\n\n\texport default {\n\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tnow: new Date(),\n\t\t\t\tcompetitorId: this.$route.params.competitorId,\n\t\t\t\tradioId: this.$route.params.radioId,\n\t\t\t\tresultsResponse: [],\n\t\t\t\tresultsToDisplay: [], // three element array\n\t\t\t\trefreshTimer: '',\n\t\t\t\tshowSplits: false\n\t\t\t}\n\t\t},\n\n\t\tcreated () {\n\n\t\t\t// Refresh the results from the API\n\t\t\tthis.refreshResults()\n\n\t\t\t// Update the now time every second\n\t\t\tsetInterval(() => this.now = new Date(), 1000)\n\n\t\t\t// Update the display\n\t\t\tconst updateLoop = () => {\n\t\t\t\tconst nowMs = +new Date()\n\t\t\t\tconst updateIntervalMs = 1000;\n\t\t\t\tconst delay = Math.floor(nowMs / 1000) * 1000 - nowMs + updateIntervalMs\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.refreshResults()\n\t\t\t\t\tupdateLoop()\n\n\t\t\t\t}, delay)\n\t\t\t}\n\n\t\t\tupdateLoop()\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.showSplits = true;\n\t\t\t}, 1000)\n\n\t\t},\n\n\t\tfilters: {\n\n\t\t\t// Format the time for display\n\t\t\tformatAbsoluteDiff: function(t) {\n\t\t\t\t\n\t\t\t\tif (t) {\n\n\t\t\t\t\t// Convert into seconds\n\t\t\t\t\tt = t / 10;\n\n\t\t\t\t\t// Format the time\n\t\t\t\t\tvar m, s;\n\t\t\t\t\tm = (Math.floor(Math.abs(t/60)).toString());\n\t\t\t\t\ts = (Math.floor(Math.abs(t%60)).toString().padStart(2, '0'));\n\n\t\t\t\t\t// If negative, they are faster\n\t\t\t\t\tif (t < 0) {\n\t\t\t\t\t\treturn `-${m}:${s}`;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If positive, they are slower\n\t\t\t\t\telse if (t > 0) {\n\t\t\t\t\t\treturn `+${m}:${s}`;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t\t// Format the time for display\n\t\t\tformatAbsoluteTime: function(t) {\n\t\t\t\t\n\t\t\t\tif (t) {\n\n\t\t\t\t\t// Convert into seconds\n\t\t\t\t\tt = t / 10;\n\n\t\t\t\t\t// Format the time\n\t\t\t\t\tvar m, s;\n\t\t\t\t\tm = (Math.floor(Math.abs(t/60)).toString());\n\t\t\t\t\ts = (Math.floor(Math.abs(t%60)).toString().padStart(2, '0'));\n\n\t\t\t\t\treturn `${m}:${s}`;\t\t\t\t\t\t\t\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t},\n\n\t\tmethods: {\n\n\t\t\tasync refreshResults () {\n\n\t\t\t\t// Get the new results\n\t\t\t\tthis.resultsResponse = await meosResultsApi.getSplitResults(this.competitorId, this.radioId);\n\n\t\t\t\t// Refresh the data to display\n\t\t\t\tthis.resultsToDisplay = await this.determineDataToDisplay();\n\n\t\t\t},\n\n\t\t\t// Finds the two nearest times to the competitor\n\t\t\tdetermineDataToDisplay() {\n\n\t\t\t\t// Create a variable to return\n\t\t\t\tvar resultsToReturn = [null,null,null];\n\n\t\t\t\t// Store the array length\n\t\t\t\tconst radioResultsLength = this.resultsResponse.radioResults.length;\n\n\t\t\t\t// Set a variable to track whether the competitor has punched this radio\n\t\t\t\tvar competitorHasPunched = false;\n\n\t\t\t\t// Check whether the competitor has punched in the radioResults array\n\t\t\t\tfor (var i = 0; i < radioResultsLength; i++) {\n\t\t\t\t\tif (this.resultsResponse.radioResults[i].competitorId == this.competitorId) {\n\t\t\t\t\t\tcompetitorHasPunched = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// The competitor has punched the radio\n\t\t\t\tif (competitorHasPunched) {\n\n\t\t\t\t\t// Check if the competitor is FIRST\n\t\t\t\t\tif (this.resultsResponse.radioResults[0].competitorId == this.competitorId) {\n\n\t\t\t\t\t\t// Set the competitor to first place in resultsToReturn\n\t\t\t\t\t\tresultsToReturn[0] = this.resultsResponse.radioResults[0];\n\n\t\t\t\t\t\t// ...and set second and third places accordingly\n\t\t\t\t\t\tif (radioResultsLength >= 2)\n\t\t\t\t\t\t\tresultsToReturn[1] = this.resultsResponse.radioResults[1];\n\n\t\t\t\t\t\tif (radioResultsLength >= 3)\n\t\t\t\t\t\t\tresultsToReturn[2] = this.resultsResponse.radioResults[2];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if the competitor is LAST\n\t\t\t\t\telse if (this.resultsResponse.radioResults[radioResultsLength - 1].competitorId == this.competitorId) {\n\n\t\t\t\t\t\t// Check if we have two other competitors\n\t\t\t\t\t\tif (radioResultsLength >= 3) {\n\n\t\t\t\t\t\t\t// Set the competitor to last place in resultsToReturn\n\t\t\t\t\t\t\tresultsToReturn[2] = this.resultsResponse.radioResults[radioResultsLength - 1];\n\n\t\t\t\t\t\t\t// Set second last and third last places accordingly\n\t\t\t\t\t\t\tresultsToReturn[1] = this.resultsResponse.radioResults[radioResultsLength - 2];\n\t\t\t\t\t\t\tresultsToReturn[0] = this.resultsResponse.radioResults[radioResultsLength - 3];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Otherwise, we only have one other competitor (if the competitor was the only competitor they would be caught by the\n\t\t\t\t\t\t// FIRST condition above)\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\t// Set the competitor to last place (i.e. second place) in resultsToReturn\n\t\t\t\t\t\t\tresultsToReturn[1] = this.resultsResponse.radioResults[radioResultsLength - 1];\n\n\t\t\t\t\t\t\t// Set second last place (i.e. first place, in this situation) accordingly\n\t\t\t\t\t\t\tresultsToReturn[0] = this.resultsResponse.radioResults[radioResultsLength - 2];\n\n\t\t\t\t\t\t\t// Leave index 2 empty, as there are only two competitors\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Otherwise, the competitor is within the field somewhere\n\t\t\t\t\telse {\n\n\t\t\t\t\t\t// Locate the competitor in the radioResults array\n\t\t\t\t\t\tvar competitorIndex = -1;\n\n\t\t\t\t\t\tfor (var k = 0; k < radioResultsLength; k++) {\n\t\t\t\t\t\t\tif (this.resultsResponse.radioResults[k].competitorId == this.competitorId) {\n\t\t\t\t\t\t\t\tcompetitorIndex = k;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Check we do inceed have the index\n\t\t\t\t\t\tif (competitorIndex != -1) {\n\n\t\t\t\t\t\t\t// Set the resultsToReturn array\n\t\t\t\t\t\t\t// We're safe doing this, as the conditions above would capture if we risk going outside the bounds\n\t\t\t\t\t\t\t// of the radioResults array\n\t\t\t\t\t\t\tresultsToReturn[0] = this.resultsResponse.radioResults[competitorIndex - 1];\n\t\t\t\t\t\t\tresultsToReturn[1] = this.resultsResponse.radioResults[competitorIndex];\n\t\t\t\t\t\t\tresultsToReturn[2] = this.resultsResponse.radioResults[competitorIndex + 1];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// The competitor has not punched the radio (they are still running towards that control)\n\t\t\t\telse {\n\n\t\t\t\t\t// Calculate their elapsed running time\n\t\t\t\t\tconst elapsedRunningTime = this.calculateElapsedTime(this.resultsResponse.competitor.startTime);\n\n\t\t\t\t\t// Check we have a time\n\t\t\t\t\tif (elapsedRunningTime != null) {\n\n\t\t\t\t\t\t// Create a dummy radioResults object for this competitor\n\t\t\t\t\t\tconst radioResultsObjForCompetitor = {\n\t\t\t\t\t\t\t\"competitorId\": this.resultsResponse.competitor.competitorId,\n\t\t\t\t\t\t\t\"name\": this.resultsResponse.competitor.name,\n\t\t\t\t\t\t\t\"club\": this.resultsResponse.competitor.club,\n\t\t\t\t\t\t\t\"radioTime\": null,\n\t\t\t\t\t\t\t\"diff\": null,\n\t\t\t\t\t\t\t\"rank\": null\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Is this the one and only competitor so far (i.e. no one else has gone through the radio yet)?\n\t\t\t\t\t\tif (radioResultsLength == 0) {\n\n\t\t\t\t\t\t\t// Set the competitor to first place in resultsToReturn\n\t\t\t\t\t\t\tresultsToReturn[0] = radioResultsObjForCompetitor;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Otherwise, others have gone through the radio so we need to figure out where to put this competitor\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\t// Store the index of the immediate competitor we are beating\n\t\t\t\t\t\t\tvar beatingCompetitorAtIndex = -1;\n\n\t\t\t\t\t\t\t// Loop through all competitors who have punched the radio\n\t\t\t\t\t\t\tfor (var j = 0; j < radioResultsLength; j++) {\n\t\t\t\t\t\t\t\tif (elapsedRunningTime < this.resultsResponse.radioResults[j].radioTime) {\n\t\t\t\t\t\t\t\t\tbeatingCompetitorAtIndex = j;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Check if the competitor is FIRST\n\t\t\t\t\t\t\tif (beatingCompetitorAtIndex == 0) {\n\n\t\t\t\t\t\t\t\t// Set the competitor to first place in resultsToReturn\n\t\t\t\t\t\t\t\tresultsToReturn[0] = radioResultsObjForCompetitor;\n\n\t\t\t\t\t\t\t\t// ...and set second and third places accordingly\n\t\t\t\t\t\t\t\tif (radioResultsLength >= 2)\n\t\t\t\t\t\t\t\t\tresultsToReturn[1] = this.resultsResponse.radioResults[0];\n\n\t\t\t\t\t\t\t\tif (radioResultsLength >= 3)\n\t\t\t\t\t\t\t\t\tresultsToReturn[2] = this.resultsResponse.radioResults[1];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Check if the competitor is LAST\n\t\t\t\t\t\t\telse if (beatingCompetitorAtIndex == -1) {\n\n\t\t\t\t\t\t\t\t// Check if we have two other competitors\n\t\t\t\t\t\t\t\tif (radioResultsLength >= 2) {\n\n\t\t\t\t\t\t\t\t\t// Set the competitor to last place in resultsToReturn\n\t\t\t\t\t\t\t\t\tresultsToReturn[2] = radioResultsObjForCompetitor;\n\n\t\t\t\t\t\t\t\t\t// Set second last and third last places accordingly\n\t\t\t\t\t\t\t\t\tresultsToReturn[1] = this.resultsResponse.radioResults[radioResultsLength - 1];\n\t\t\t\t\t\t\t\t\tresultsToReturn[0] = this.resultsResponse.radioResults[radioResultsLength - 2];\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Otherwise, we only have one other competitor (if the competitor was the only competitor they would be caught by the\n\t\t\t\t\t\t\t\t// FIRST condition above)\n\t\t\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\t\t\t// Set the competitor to last place (i.e. second place) in resultsToReturn\n\t\t\t\t\t\t\t\t\tresultsToReturn[1] = radioResultsObjForCompetitor;\n\n\t\t\t\t\t\t\t\t\t// Set second last place (i.e. first place, in this situation) accordingly\n\t\t\t\t\t\t\t\t\tresultsToReturn[0] = this.resultsResponse.radioResults[radioResultsLength - 2];\n\n\t\t\t\t\t\t\t\t\t// Leave index 2 empty, as there are only two competitors\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Otherwise, the competitor is within the field somewhere\n\t\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\t\t// Set the resultsToReturn array\n\t\t\t\t\t\t\t\t// We're safe doing this, as the conditions above would capture if we risk going outside the bounds\n\t\t\t\t\t\t\t\t// of the radioResults array\n\t\t\t\t\t\t\t\tresultsToReturn[0] = this.resultsResponse.radioResults[beatingCompetitorAtIndex - 1];\n\t\t\t\t\t\t\t\tresultsToReturn[1] = radioResultsObjForCompetitor;\n\t\t\t\t\t\t\t\tresultsToReturn[2] = this.resultsResponse.radioResults[beatingCompetitorAtIndex];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Return\n\t\t\t\treturn resultsToReturn;\n\n\t\t\t},\n\n\t\t\t// Calculates the competitors elapsed time\n\t\t\tcalculateElapsedTime(competitorStartTime) {\n\n\t\t\t\t// Check that we have a time\n\t\t\t\tif (competitorStartTime) {\n\n\t\t\t\t\t// Time of day in 10ths of seconds\n\t\t\t\t\tconst { now } = this;\n\t\t\t\t\tconst currentTimeSecs = (now.getSeconds() + (60 * now.getMinutes()) + (60 * 60 * now.getHours())) * 10;\n\n\t\t\t\t\t// Calculate elapsed running time, we need to do this as all the radio times are relative to that competitor's running time,\n\t\t\t\t\t// not absolute time\n\t\t\t\t\tconst elapsedRunningTime = currentTimeSecs - competitorStartTime;\n\n\t\t\t\t\t// console.log(elapsedRunningTime);\n\n\t\t\t\t\t// Return the time\n\t\t\t\t\treturn elapsedRunningTime;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t},\n\n\t\t\t// Calculates the difference between two times\n\t\t\tcalculateDiffToLeader(secs) {\n\n\t\t\t\t// Determine the difference - all times are in seconds (not 10ths of seconds)\n\t\t\t\tconst diff = (secs - this.resultsResponse.radioResults[0].radioTime);\n\n\t\t\t\t// Return the diff\n\t\t\t\treturn diff;\n\n\t\t\t},\n\n\t\t\t// Displays the distance info (if available) for a particular radio\n\t\t\tformatDistance(d) {\n\n\t\t\t\t// Convert the distance in meters into km for display, rounded to 1dp\n\t\t\t\tvar distanceInKm = parseFloat(d / 1000).toFixed(1);\n\n\t\t\t\t// Return the distance\n\t\t\t\treturn distanceInKm;\n\n\t\t\t},\n\n\t\t}\n\n\t}\n\n</script>"]}]}